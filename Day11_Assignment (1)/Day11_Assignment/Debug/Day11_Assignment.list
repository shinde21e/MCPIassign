
Day11_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000578  08000578  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000578  08000578  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000578  08000578  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000578  08000578  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000578  08000578  00001578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800057c  0800057c  0000157c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000580  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001505  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000520  00000000  00000000  00003533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e0  00000000  00000000  00003a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000092  00000000  00000000  00003b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000180b7  00000000  00000000  00003bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001421  00000000  00000000  0001bc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bd1a  00000000  00000000  0001d0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a8dbc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001dc  00000000  00000000  000a8e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000a8fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000057  00000000  00000000  000a8ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000560 	.word	0x08000560

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000560 	.word	0x08000560

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
   int duty;
   SystemInit();
 800021e:	f000 f8c9 	bl	80003b4 <SystemInit>
   SwitchInit(SWITCH);
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f850 	bl	80002c8 <SwitchInit>
   TimerInit();
 8000228:	f000 f8fa 	bl	8000420 <TimerInit>
   while(1)
   {
	   for(duty=1; duty<=100;)
 800022c:	2301      	movs	r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	e010      	b.n	8000254 <main+0x3c>
	   {
		   TIM8->CCR1 = duty;// LED on
 8000232:	4a15      	ldr	r2, [pc, #84]	@ (8000288 <main+0x70>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	6353      	str	r3, [r2, #52]	@ 0x34
		   while(exti0_flag == 0);
 8000238:	bf00      	nop
 800023a:	4b14      	ldr	r3, [pc, #80]	@ (800028c <main+0x74>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0fb      	beq.n	800023a <main+0x22>
		   duty = duty+5;
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	3305      	adds	r3, #5
 8000246:	607b      	str	r3, [r7, #4]
		   exti0_flag = 0;
 8000248:	4b10      	ldr	r3, [pc, #64]	@ (800028c <main+0x74>)
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
		   DelayMs(50);
 800024e:	2032      	movs	r0, #50	@ 0x32
 8000250:	f7ff ffba 	bl	80001c8 <DelayMs>
	   for(duty=1; duty<=100;)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2b64      	cmp	r3, #100	@ 0x64
 8000258:	ddeb      	ble.n	8000232 <main+0x1a>
	   }

	   for(; duty>=1;)
 800025a:	e010      	b.n	800027e <main+0x66>
	   {
		   TIM8->CCR1 = duty;// LED on
 800025c:	4a0a      	ldr	r2, [pc, #40]	@ (8000288 <main+0x70>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	6353      	str	r3, [r2, #52]	@ 0x34
		   while(exti0_flag == 0);
 8000262:	bf00      	nop
 8000264:	4b09      	ldr	r3, [pc, #36]	@ (800028c <main+0x74>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d0fb      	beq.n	8000264 <main+0x4c>
		   duty = duty-5;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3b05      	subs	r3, #5
 8000270:	607b      	str	r3, [r7, #4]
		   exti0_flag = 0;
 8000272:	4b06      	ldr	r3, [pc, #24]	@ (800028c <main+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
		   DelayMs(50);
 8000278:	2032      	movs	r0, #50	@ 0x32
 800027a:	f7ff ffa5 	bl	80001c8 <DelayMs>
	   for(; duty>=1;)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b00      	cmp	r3, #0
 8000282:	dceb      	bgt.n	800025c <main+0x44>
	   for(duty=1; duty<=100;)
 8000284:	e7d2      	b.n	800022c <main+0x14>
 8000286:	bf00      	nop
 8000288:	40010400 	.word	0x40010400
 800028c:	20000020 	.word	0x20000020

08000290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db0b      	blt.n	80002ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	f003 021f 	and.w	r2, r3, #31
 80002a8:	4906      	ldr	r1, [pc, #24]	@ (80002c4 <__NVIC_EnableIRQ+0x34>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	095b      	lsrs	r3, r3, #5
 80002b0:	2001      	movs	r0, #1
 80002b2:	fa00 f202 	lsl.w	r2, r0, r2
 80002b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	e000e100 	.word	0xe000e100

080002c8 <SwitchInit>:
 *      Author: Nilesh
 */

#include "switch.h"

void SwitchInit(uint32_t pin) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80002d0:	4b2a      	ldr	r3, [pc, #168]	@ (800037c <SwitchInit+0xb4>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d4:	4a29      	ldr	r2, [pc, #164]	@ (800037c <SwitchInit+0xb4>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as input (in MODER)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002dc:	4b28      	ldr	r3, [pc, #160]	@ (8000380 <SwitchInit+0xb8>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	687a      	ldr	r2, [r7, #4]
 80002e2:	0052      	lsls	r2, r2, #1
 80002e4:	3201      	adds	r2, #1
 80002e6:	2101      	movs	r1, #1
 80002e8:	4091      	lsls	r1, r2
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	0052      	lsls	r2, r2, #1
 80002ee:	2001      	movs	r0, #1
 80002f0:	fa00 f202 	lsl.w	r2, r0, r2
 80002f4:	430a      	orrs	r2, r1
 80002f6:	43d2      	mvns	r2, r2
 80002f8:	4611      	mov	r1, r2
 80002fa:	4a21      	ldr	r2, [pc, #132]	@ (8000380 <SwitchInit+0xb8>)
 80002fc:	400b      	ands	r3, r1
 80002fe:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000300:	4b1f      	ldr	r3, [pc, #124]	@ (8000380 <SwitchInit+0xb8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	0052      	lsls	r2, r2, #1
 8000308:	3201      	adds	r2, #1
 800030a:	2101      	movs	r1, #1
 800030c:	4091      	lsls	r1, r2
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	0052      	lsls	r2, r2, #1
 8000312:	2001      	movs	r0, #1
 8000314:	fa00 f202 	lsl.w	r2, r0, r2
 8000318:	430a      	orrs	r2, r1
 800031a:	43d2      	mvns	r2, r2
 800031c:	4611      	mov	r1, r2
 800031e:	4a18      	ldr	r2, [pc, #96]	@ (8000380 <SwitchInit+0xb8>)
 8000320:	400b      	ands	r3, r1
 8000322:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000324:	4b16      	ldr	r3, [pc, #88]	@ (8000380 <SwitchInit+0xb8>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	3201      	adds	r2, #1
 800032e:	2101      	movs	r1, #1
 8000330:	4091      	lsls	r1, r2
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	0052      	lsls	r2, r2, #1
 8000336:	2001      	movs	r0, #1
 8000338:	fa00 f202 	lsl.w	r2, r0, r2
 800033c:	430a      	orrs	r2, r1
 800033e:	43d2      	mvns	r2, r2
 8000340:	4611      	mov	r1, r2
 8000342:	4a0f      	ldr	r2, [pc, #60]	@ (8000380 <SwitchInit+0xb8>)
 8000344:	400b      	ands	r3, r1
 8000346:	60d3      	str	r3, [r2, #12]
	// enable falling edge detection (in FTSR)
	EXTI->FTSR |= BV(SWITCH);
 8000348:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <SwitchInit+0xbc>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a0d      	ldr	r2, [pc, #52]	@ (8000384 <SwitchInit+0xbc>)
 800034e:	f043 0301 	orr.w	r3, r3, #1
 8000352:	60d3      	str	r3, [r2, #12]
	// enable (unmask) exti interrupt (in IMR)
	EXTI->IMR |= BV(SWITCH);
 8000354:	4b0b      	ldr	r3, [pc, #44]	@ (8000384 <SwitchInit+0xbc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0a      	ldr	r2, [pc, #40]	@ (8000384 <SwitchInit+0xbc>)
 800035a:	f043 0301 	orr.w	r3, r3, #1
 800035e:	6013      	str	r3, [r2, #0]
	// select exti interrupt (in SYSCFG->EXTICRx)
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 8000360:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <SwitchInit+0xc0>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	4a08      	ldr	r2, [pc, #32]	@ (8000388 <SwitchInit+0xc0>)
 8000366:	f023 030f 	bic.w	r3, r3, #15
 800036a:	6093      	str	r3, [r2, #8]
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
 800036c:	2006      	movs	r0, #6
 800036e:	f7ff ff8f 	bl	8000290 <__NVIC_EnableIRQ>
}
 8000372:	bf00      	nop
 8000374:	3708      	adds	r7, #8
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	40023800 	.word	0x40023800
 8000380:	40020000 	.word	0x40020000
 8000384:	40013c00 	.word	0x40013c00
 8000388:	40013800 	.word	0x40013800

0800038c <EXTI0_IRQHandler>:

// Global flag for interrupt
int exti0_flag = 0;

// Switch EXTT0 IRQ Handler
void EXTI0_IRQHandler(void) {
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
    // Acknowledge interrupt (in PR)
	EXTI->PR |= BV(SWITCH);
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <EXTI0_IRQHandler+0x20>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a05      	ldr	r2, [pc, #20]	@ (80003ac <EXTI0_IRQHandler+0x20>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6153      	str	r3, [r2, #20]
	// Handle interrupt
	exti0_flag = 1;
 800039c:	4b04      	ldr	r3, [pc, #16]	@ (80003b0 <EXTI0_IRQHandler+0x24>)
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40013c00 	.word	0x40013c00
 80003b0:	20000020 	.word	0x20000020

080003b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  DWT_Init();
 80003b8:	f000 f802 	bl	80003c0 <DWT_Init>
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}

080003c0 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80003c4:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <DWT_Init+0x58>)
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	4a13      	ldr	r2, [pc, #76]	@ (8000418 <DWT_Init+0x58>)
 80003ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80003ce:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <DWT_Init+0x58>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	4a10      	ldr	r2, [pc, #64]	@ (8000418 <DWT_Init+0x58>)
 80003d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003da:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <DWT_Init+0x5c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0e      	ldr	r2, [pc, #56]	@ (800041c <DWT_Init+0x5c>)
 80003e2:	f023 0301 	bic.w	r3, r3, #1
 80003e6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	@ (800041c <DWT_Init+0x5c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a0b      	ldr	r2, [pc, #44]	@ (800041c <DWT_Init+0x5c>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80003f4:	4b09      	ldr	r3, [pc, #36]	@ (800041c <DWT_Init+0x5c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80003fa:	bf00      	nop
    __ASM volatile ("NOP");
 80003fc:	bf00      	nop
    __ASM volatile ("NOP");
 80003fe:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <DWT_Init+0x5c>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	2b00      	cmp	r3, #0
 8000406:	bf0c      	ite	eq
 8000408:	2301      	moveq	r3, #1
 800040a:	2300      	movne	r3, #0
 800040c:	b2db      	uxtb	r3, r3
}
 800040e:	4618      	mov	r0, r3
 8000410:	46bd      	mov	sp, r7
 8000412:	bc80      	pop	{r7}
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e000edf0 	.word	0xe000edf0
 800041c:	e0001000 	.word	0xe0001000

08000420 <TimerInit>:
6. Enable the capture compare in CCER.
7. Enable main output in BDTR and Enable the counter.
*/

void TimerInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	 // Enable GPIO clock for port C.6
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000424:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <TimerInit+0x98>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000428:	4a23      	ldr	r2, [pc, #140]	@ (80004b8 <TimerInit+0x98>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6313      	str	r3, [r2, #48]	@ 0x30
	// Configure PC6 as alternate function mode
		GPIOC->MODER |= (2<<6*2);
 8000430:	4b22      	ldr	r3, [pc, #136]	@ (80004bc <TimerInit+0x9c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a21      	ldr	r2, [pc, #132]	@ (80004bc <TimerInit+0x9c>)
 8000436:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800043a:	6013      	str	r3, [r2, #0]
	// Set alternate function as Timer8 output (AF3)
		GPIOC->AFR[0] |= (3<<GPIO_AFRL_AFSEL6_Pos);
 800043c:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <TimerInit+0x9c>)
 800043e:	6a1b      	ldr	r3, [r3, #32]
 8000440:	4a1e      	ldr	r2, [pc, #120]	@ (80004bc <TimerInit+0x9c>)
 8000442:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8000446:	6213      	str	r3, [r2, #32]
    // Enable Timer8 clock
		RCC->APB2ENR |= RCC_APB2ENR_TIM8EN;
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <TimerInit+0x98>)
 800044a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800044c:	4a1a      	ldr	r2, [pc, #104]	@ (80004b8 <TimerInit+0x98>)
 800044e:	f043 0302 	orr.w	r3, r3, #2
 8000452:	6453      	str	r3, [r2, #68]	@ 0x44
		// Set prescaler value.
		TIM8->PSC =(TIM_PSC-1);
 8000454:	4b1a      	ldr	r3, [pc, #104]	@ (80004c0 <TimerInit+0xa0>)
 8000456:	220f      	movs	r2, #15
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
		// Set ARR value to 100 for 10KHz PWM output freq
		TIM8->ARR =(100-1);
 800045a:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <TimerInit+0xa0>)
 800045c:	2263      	movs	r2, #99	@ 0x63
 800045e:	62da      	str	r2, [r3, #44]	@ 0x2c
		// Set CCR value i.e. Duty Cycle (must be less than ARR value)
	    TIM8->CCR1 = 1-1;
 8000460:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <TimerInit+0xa0>)
 8000462:	2200      	movs	r2, #0
 8000464:	635a      	str	r2, [r3, #52]	@ 0x34
	    //TIM8->CCMR1 &= ~TIM_CCMR1_CC1S;	// default
	    // Configure Timer8 channel polarity as active high
	    //TIM8->CCER &= ~TIM_CCER_CC1P;		// default
	    // Configure Timer8 for output compare mode

	        TIM8->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1;// PWM Mode 1 => 110
 8000466:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <TimerInit+0xa0>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a15      	ldr	r2, [pc, #84]	@ (80004c0 <TimerInit+0xa0>)
 800046c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000470:	6193      	str	r3, [r2, #24]
	       // Set the preload bit in CCMRx register
	        TIM8->CCMR1 |= TIM_CCMR1_OC1PE;
 8000472:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <TimerInit+0xa0>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a12      	ldr	r2, [pc, #72]	@ (80004c0 <TimerInit+0xa0>)
 8000478:	f043 0308 	orr.w	r3, r3, #8
 800047c:	6193      	str	r3, [r2, #24]
	        // Set the ARPE bit in the CR1 register.
	        TIM8->CR1 |= TIM_CR1_ARPE;
 800047e:	4b10      	ldr	r3, [pc, #64]	@ (80004c0 <TimerInit+0xa0>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a0f      	ldr	r2, [pc, #60]	@ (80004c0 <TimerInit+0xa0>)
 8000484:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000488:	6013      	str	r3, [r2, #0]
	        // Set the PWM edge align mode in the CR1 register.
	        //TIM8->CR1 &= ~TIM_CR1_CMS;	// default

	        // Configure Timer8 output OCx signal to output pin
	        TIM8->CCER |= TIM_CCER_CC1E;
 800048a:	4b0d      	ldr	r3, [pc, #52]	@ (80004c0 <TimerInit+0xa0>)
 800048c:	6a1b      	ldr	r3, [r3, #32]
 800048e:	4a0c      	ldr	r2, [pc, #48]	@ (80004c0 <TimerInit+0xa0>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6213      	str	r3, [r2, #32]

	        // Enable Timer 8 Main output and Timer8 peripheral
	        TIM8->BDTR |= TIM_BDTR_MOE;
 8000496:	4b0a      	ldr	r3, [pc, #40]	@ (80004c0 <TimerInit+0xa0>)
 8000498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800049a:	4a09      	ldr	r2, [pc, #36]	@ (80004c0 <TimerInit+0xa0>)
 800049c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004a0:	6453      	str	r3, [r2, #68]	@ 0x44
	        TIM8->CR1 |= TIM_CR1_CEN;
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <TimerInit+0xa0>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a06      	ldr	r2, [pc, #24]	@ (80004c0 <TimerInit+0xa0>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40020800 	.word	0x40020800
 80004c0:	40010400 	.word	0x40010400

080004c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c4:	480d      	ldr	r0, [pc, #52]	@ (80004fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c8:	f7ff ff74 	bl	80003b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004cc:	480c      	ldr	r0, [pc, #48]	@ (8000500 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ce:	490d      	ldr	r1, [pc, #52]	@ (8000504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000508 <LoopForever+0xe>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d4:	e002      	b.n	80004dc <LoopCopyDataInit>

080004d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004da:	3304      	adds	r3, #4

080004dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e0:	d3f9      	bcc.n	80004d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e2:	4a0a      	ldr	r2, [pc, #40]	@ (800050c <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000510 <LoopForever+0x16>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e8:	e001      	b.n	80004ee <LoopFillZerobss>

080004ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004ec:	3204      	adds	r2, #4

080004ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f0:	d3fb      	bcc.n	80004ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004f2:	f000 f811 	bl	8000518 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f6:	f7ff fe8f 	bl	8000218 <main>

080004fa <LoopForever>:

LoopForever:
  b LoopForever
 80004fa:	e7fe      	b.n	80004fa <LoopForever>
  ldr   r0, =_estack
 80004fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000504:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000508:	08000580 	.word	0x08000580
  ldr r2, =_sbss
 800050c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000510:	20000024 	.word	0x20000024

08000514 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000514:	e7fe      	b.n	8000514 <ADC_IRQHandler>
	...

08000518 <__libc_init_array>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	4d0d      	ldr	r5, [pc, #52]	@ (8000550 <__libc_init_array+0x38>)
 800051c:	4c0d      	ldr	r4, [pc, #52]	@ (8000554 <__libc_init_array+0x3c>)
 800051e:	1b64      	subs	r4, r4, r5
 8000520:	10a4      	asrs	r4, r4, #2
 8000522:	2600      	movs	r6, #0
 8000524:	42a6      	cmp	r6, r4
 8000526:	d109      	bne.n	800053c <__libc_init_array+0x24>
 8000528:	4d0b      	ldr	r5, [pc, #44]	@ (8000558 <__libc_init_array+0x40>)
 800052a:	4c0c      	ldr	r4, [pc, #48]	@ (800055c <__libc_init_array+0x44>)
 800052c:	f000 f818 	bl	8000560 <_init>
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	10a4      	asrs	r4, r4, #2
 8000534:	2600      	movs	r6, #0
 8000536:	42a6      	cmp	r6, r4
 8000538:	d105      	bne.n	8000546 <__libc_init_array+0x2e>
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000540:	4798      	blx	r3
 8000542:	3601      	adds	r6, #1
 8000544:	e7ee      	b.n	8000524 <__libc_init_array+0xc>
 8000546:	f855 3b04 	ldr.w	r3, [r5], #4
 800054a:	4798      	blx	r3
 800054c:	3601      	adds	r6, #1
 800054e:	e7f2      	b.n	8000536 <__libc_init_array+0x1e>
 8000550:	08000578 	.word	0x08000578
 8000554:	08000578 	.word	0x08000578
 8000558:	08000578 	.word	0x08000578
 800055c:	0800057c 	.word	0x0800057c

08000560 <_init>:
 8000560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000562:	bf00      	nop
 8000564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000566:	bc08      	pop	{r3}
 8000568:	469e      	mov	lr, r3
 800056a:	4770      	bx	lr

0800056c <_fini>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	bf00      	nop
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr
