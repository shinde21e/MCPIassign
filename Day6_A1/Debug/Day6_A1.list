
Day6_A1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001244  08001244  00002244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800128c  0800128c  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  0800128c  0800128c  0000228c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001294  08001294  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001294  08001294  00002294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001298  08001298  00002298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800129c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          0000016c  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b75  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000077d  00000000  00000000  00004bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00005370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e9  00000000  00000000  000054d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019582  00000000  00000000  000055b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000220a  00000000  00000000  0001eb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c407  00000000  00000000  00020d45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ad14c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000008ac  00000000  00000000  000ad190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000ada3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  000ada5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800122c 	.word	0x0800122c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	0800122c 	.word	0x0800122c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4906      	ldr	r1, [pc, #24]	@ (80002a4 <__NVIC_EnableIRQ+0x34>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100

080002a8 <SwitchInit>:
#include "switch.h"
#include "led.h"
#include "lcd.h"

void SwitchInit(uint32_t pin)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b082      	sub	sp, #8
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |=BV(SWITCH_GPIO_EN);
 80002b0:	4b2a      	ldr	r3, [pc, #168]	@ (800035c <SwitchInit+0xb4>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b4:	4a29      	ldr	r2, [pc, #164]	@ (800035c <SwitchInit+0xb4>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6313      	str	r3, [r2, #48]	@ 0x30
	SWITCH_GPIO->MODER &=~(BV(pin*2+1)| BV(pin*2));
 80002bc:	4b28      	ldr	r3, [pc, #160]	@ (8000360 <SwitchInit+0xb8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	0052      	lsls	r2, r2, #1
 80002c4:	3201      	adds	r2, #1
 80002c6:	2101      	movs	r1, #1
 80002c8:	4091      	lsls	r1, r2
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	0052      	lsls	r2, r2, #1
 80002ce:	2001      	movs	r0, #1
 80002d0:	fa00 f202 	lsl.w	r2, r0, r2
 80002d4:	430a      	orrs	r2, r1
 80002d6:	43d2      	mvns	r2, r2
 80002d8:	4611      	mov	r1, r2
 80002da:	4a21      	ldr	r2, [pc, #132]	@ (8000360 <SwitchInit+0xb8>)
 80002dc:	400b      	ands	r3, r1
 80002de:	6013      	str	r3, [r2, #0]
	SWITCH_GPIO->OSPEEDR &=~(BV(pin*2+1)| BV(pin*2));
 80002e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000360 <SwitchInit+0xb8>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	0052      	lsls	r2, r2, #1
 80002e8:	3201      	adds	r2, #1
 80002ea:	2101      	movs	r1, #1
 80002ec:	4091      	lsls	r1, r2
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	0052      	lsls	r2, r2, #1
 80002f2:	2001      	movs	r0, #1
 80002f4:	fa00 f202 	lsl.w	r2, r0, r2
 80002f8:	430a      	orrs	r2, r1
 80002fa:	43d2      	mvns	r2, r2
 80002fc:	4611      	mov	r1, r2
 80002fe:	4a18      	ldr	r2, [pc, #96]	@ (8000360 <SwitchInit+0xb8>)
 8000300:	400b      	ands	r3, r1
 8000302:	6093      	str	r3, [r2, #8]
	SWITCH_GPIO->PUPDR &=~(BV(pin*2+1)| BV(pin*2));
 8000304:	4b16      	ldr	r3, [pc, #88]	@ (8000360 <SwitchInit+0xb8>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	0052      	lsls	r2, r2, #1
 800030c:	3201      	adds	r2, #1
 800030e:	2101      	movs	r1, #1
 8000310:	4091      	lsls	r1, r2
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	0052      	lsls	r2, r2, #1
 8000316:	2001      	movs	r0, #1
 8000318:	fa00 f202 	lsl.w	r2, r0, r2
 800031c:	430a      	orrs	r2, r1
 800031e:	43d2      	mvns	r2, r2
 8000320:	4611      	mov	r1, r2
 8000322:	4a0f      	ldr	r2, [pc, #60]	@ (8000360 <SwitchInit+0xb8>)
 8000324:	400b      	ands	r3, r1
 8000326:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |=BV(SWITCH);
 8000328:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <SwitchInit+0xbc>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4a0d      	ldr	r2, [pc, #52]	@ (8000364 <SwitchInit+0xbc>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	60d3      	str	r3, [r2, #12]
	EXTI->IMR  |=BV(SWITCH);
 8000334:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <SwitchInit+0xbc>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <SwitchInit+0xbc>)
 800033a:	f043 0301 	orr.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3)|BV(2)|BV(1)|BV(0));
 8000340:	4b09      	ldr	r3, [pc, #36]	@ (8000368 <SwitchInit+0xc0>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4a08      	ldr	r2, [pc, #32]	@ (8000368 <SwitchInit+0xc0>)
 8000346:	f023 030f 	bic.w	r3, r3, #15
 800034a:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(EXTI0_IRQn);
 800034c:	2006      	movs	r0, #6
 800034e:	f7ff ff8f 	bl	8000270 <__NVIC_EnableIRQ>
}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40020000 	.word	0x40020000
 8000364:	40013c00 	.word	0x40013c00
 8000368:	40013800 	.word	0x40013800

0800036c <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 800036c:	b480      	push	{r7}
 800036e:	b085      	sub	sp, #20
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000374:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <DelayMs+0x44>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800037a:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <DelayMs+0x48>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <DelayMs+0x4c>)
 8000380:	fba2 2303 	umull	r2, r3, r2, r3
 8000384:	099b      	lsrs	r3, r3, #6
 8000386:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	fb02 f303 	mul.w	r3, r2, r3
 8000390:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000392:	bf00      	nop
 8000394:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <DelayMs+0x44>)
 8000396:	685a      	ldr	r2, [r3, #4]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	1ad2      	subs	r2, r2, r3
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d3f8      	bcc.n	8000394 <DelayMs+0x28>
}
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	3714      	adds	r7, #20
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	e0001000 	.word	0xe0001000
 80003b4:	20000000 	.word	0x20000000
 80003b8:	10624dd3 	.word	0x10624dd3

080003bc <LcdBusyWait>:

#include "lcd.h"
#include "switch.h"
#include "led.h"

void LcdBusyWait(void) {
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
	uint32_t state;
	// make D7/BF pin as input
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_BF*2)|BV(LCD_BF*2+1));
 80003c2:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <LcdBusyWait+0x48>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000404 <LcdBusyWait+0x48>)
 80003c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80003cc:	6013      	str	r3, [r2, #0]
	// set RS=0, RW=1, EN=1
	LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW) | BV(LCD_EN);
 80003ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <LcdBusyWait+0x48>)
 80003d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000408 <LcdBusyWait+0x4c>)
 80003d2:	619a      	str	r2, [r3, #24]
	// read data
	do {
		state = LCD_DATA_GPIO->IDR;
 80003d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <LcdBusyWait+0x48>)
 80003d6:	691b      	ldr	r3, [r3, #16]
 80003d8:	607b      	str	r3, [r7, #4]
	} while((state & BV(LCD_BF)) != 0); // repeat if BF=1
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f003 0308 	and.w	r3, r3, #8
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d1f7      	bne.n	80003d4 <LcdBusyWait+0x18>
	// set RW=0, EN=0
	LCD_CTRL_GPIO->BSRR = BV(LCD_RW_CLR) | BV(LCD_EN_CLR);
 80003e4:	4b07      	ldr	r3, [pc, #28]	@ (8000404 <LcdBusyWait+0x48>)
 80003e6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80003ea:	619a      	str	r2, [r3, #24]
	// make D7/BF pin as output
	LCD_DATA_GPIO->MODER |= BV(LCD_BF*2);
 80003ec:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <LcdBusyWait+0x48>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a04      	ldr	r2, [pc, #16]	@ (8000404 <LcdBusyWait+0x48>)
 80003f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003f6:	6013      	str	r3, [r2, #0]
}
 80003f8:	bf00      	nop
 80003fa:	370c      	adds	r7, #12
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	40020c00 	.word	0x40020c00
 8000408:	002000c0 	.word	0x002000c0

0800040c <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t val) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	460a      	mov	r2, r1
 8000416:	71fb      	strb	r3, [r7, #7]
 8000418:	4613      	mov	r3, r2
 800041a:	71bb      	strb	r3, [r7, #6]
	// set RS, RW = 0
	if(rs == LCD_CMD) // RS = 0
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d104      	bne.n	800042c <LcdWriteNibble+0x20>
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW_CLR);
 8000422:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <LcdWriteNibble+0x5c>)
 8000424:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 8000428:	619a      	str	r2, [r3, #24]
 800042a:	e002      	b.n	8000432 <LcdWriteNibble+0x26>
	else // RS = 1
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS) | BV(LCD_RW_CLR);
 800042c:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <LcdWriteNibble+0x5c>)
 800042e:	4a0f      	ldr	r2, [pc, #60]	@ (800046c <LcdWriteNibble+0x60>)
 8000430:	619a      	str	r2, [r3, #24]
	// write data (4-bits)
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 8000432:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <LcdWriteNibble+0x5c>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a0c      	ldr	r2, [pc, #48]	@ (8000468 <LcdWriteNibble+0x5c>)
 8000438:	f023 030f 	bic.w	r3, r3, #15
 800043c:	6153      	str	r3, [r2, #20]
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 800043e:	4b0a      	ldr	r3, [pc, #40]	@ (8000468 <LcdWriteNibble+0x5c>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	79bb      	ldrb	r3, [r7, #6]
 8000444:	4908      	ldr	r1, [pc, #32]	@ (8000468 <LcdWriteNibble+0x5c>)
 8000446:	4313      	orrs	r3, r2
 8000448:	614b      	str	r3, [r1, #20]
	// falling edge on EN
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 800044a:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <LcdWriteNibble+0x5c>)
 800044c:	2280      	movs	r2, #128	@ 0x80
 800044e:	619a      	str	r2, [r3, #24]
	DelayMs(1);
 8000450:	2001      	movs	r0, #1
 8000452:	f7ff ff8b 	bl	800036c <DelayMs>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 8000456:	4b04      	ldr	r3, [pc, #16]	@ (8000468 <LcdWriteNibble+0x5c>)
 8000458:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800045c:	619a      	str	r2, [r3, #24]
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40020c00 	.word	0x40020c00
 800046c:	00400020 	.word	0x00400020

08000470 <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val >> 4, low = val & 0x0F;
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	091b      	lsrs	r3, r3, #4
 8000484:	73fb      	strb	r3, [r7, #15]
 8000486:	79bb      	ldrb	r3, [r7, #6]
 8000488:	f003 030f 	and.w	r3, r3, #15
 800048c:	73bb      	strb	r3, [r7, #14]
	// write high nibble
	LcdWriteNibble(rs, high);
 800048e:	7bfa      	ldrb	r2, [r7, #15]
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	4611      	mov	r1, r2
 8000494:	4618      	mov	r0, r3
 8000496:	f7ff ffb9 	bl	800040c <LcdWriteNibble>
	// write low nibble
	LcdWriteNibble(rs, low);
 800049a:	7bba      	ldrb	r2, [r7, #14]
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	4611      	mov	r1, r2
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ffb3 	bl	800040c <LcdWriteNibble>
	// wait for busy flag
	LcdBusyWait();
 80004a6:	f7ff ff89 	bl	80003bc <LcdBusyWait>
	DelayMs(3);
 80004aa:	2003      	movs	r0, #3
 80004ac:	f7ff ff5e 	bl	800036c <DelayMs>
}
 80004b0:	bf00      	nop
 80004b2:	3710      	adds	r7, #16
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <LcdInit>:

void LcdInit(void) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	DelayMs(50);
 80004bc:	2032      	movs	r0, #50	@ 0x32
 80004be:	f7ff ff55 	bl	800036c <DelayMs>
	// enable lcd data port and ctrl port
	RCC->AHB1ENR |= BV(LCD_DATA_GPIO_EN);
 80004c2:	4b34      	ldr	r3, [pc, #208]	@ (8000594 <LcdInit+0xdc>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c6:	4a33      	ldr	r2, [pc, #204]	@ (8000594 <LcdInit+0xdc>)
 80004c8:	f043 0308 	orr.w	r3, r3, #8
 80004cc:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->AHB1ENR |= BV(LCD_CTRL_GPIO_EN);
 80004ce:	4b31      	ldr	r3, [pc, #196]	@ (8000594 <LcdInit+0xdc>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a30      	ldr	r2, [pc, #192]	@ (8000594 <LcdInit+0xdc>)
 80004d4:	f043 0308 	orr.w	r3, r3, #8
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30

	//initialize lcd data pins (mode=output, speed=low, type=push-pull, no pull up/down)
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1));
 80004da:	4b2f      	ldr	r3, [pc, #188]	@ (8000598 <LcdInit+0xe0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a2e      	ldr	r2, [pc, #184]	@ (8000598 <LcdInit+0xe0>)
 80004e0:	f023 03aa 	bic.w	r3, r3, #170	@ 0xaa
 80004e4:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->MODER |= BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2);
 80004e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000598 <LcdInit+0xe0>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000598 <LcdInit+0xe0>)
 80004ec:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80004f0:	6013      	str	r3, [r2, #0]
	LCD_DATA_GPIO->OSPEEDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 80004f2:	4b29      	ldr	r3, [pc, #164]	@ (8000598 <LcdInit+0xe0>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	4a28      	ldr	r2, [pc, #160]	@ (8000598 <LcdInit+0xe0>)
 80004f8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80004fc:	6093      	str	r3, [r2, #8]
	LCD_DATA_GPIO->PUPDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 80004fe:	4b26      	ldr	r3, [pc, #152]	@ (8000598 <LcdInit+0xe0>)
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	4a25      	ldr	r2, [pc, #148]	@ (8000598 <LcdInit+0xe0>)
 8000504:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000508:	60d3      	str	r3, [r2, #12]
	LCD_DATA_GPIO->OTYPER &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 800050a:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <LcdInit+0xe0>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	4a22      	ldr	r2, [pc, #136]	@ (8000598 <LcdInit+0xe0>)
 8000510:	f023 030f 	bic.w	r3, r3, #15
 8000514:	6053      	str	r3, [r2, #4]
	//clear lcd data pins
	LCD_DATA_GPIO->BSRR = (BV(LCD_D7_CLR) | BV(LCD_D6_CLR) | BV(LCD_D5_CLR) | BV(LCD_D4_CLR));
 8000516:	4b20      	ldr	r3, [pc, #128]	@ (8000598 <LcdInit+0xe0>)
 8000518:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 800051c:	619a      	str	r2, [r3, #24]

	//initialize lcd ctrl pins (mode=output, speed=low, type=push-pull, no pull up/down)
	LCD_CTRL_GPIO->MODER &= ~(BV(LCD_RS*2+1) | BV(LCD_RW*2+1) | BV(LCD_EN*2+1));
 800051e:	4b1e      	ldr	r3, [pc, #120]	@ (8000598 <LcdInit+0xe0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a1d      	ldr	r2, [pc, #116]	@ (8000598 <LcdInit+0xe0>)
 8000524:	f423 4328 	bic.w	r3, r3, #43008	@ 0xa800
 8000528:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->MODER |= BV(LCD_RS*2) | BV(LCD_RW*2) | BV(LCD_EN*2);
 800052a:	4b1b      	ldr	r3, [pc, #108]	@ (8000598 <LcdInit+0xe0>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a1a      	ldr	r2, [pc, #104]	@ (8000598 <LcdInit+0xe0>)
 8000530:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 8000534:	6013      	str	r3, [r2, #0]
	LCD_CTRL_GPIO->OSPEEDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 8000536:	4b18      	ldr	r3, [pc, #96]	@ (8000598 <LcdInit+0xe0>)
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	4a17      	ldr	r2, [pc, #92]	@ (8000598 <LcdInit+0xe0>)
 800053c:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 8000540:	6093      	str	r3, [r2, #8]
	LCD_CTRL_GPIO->PUPDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <LcdInit+0xe0>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	4a14      	ldr	r2, [pc, #80]	@ (8000598 <LcdInit+0xe0>)
 8000548:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800054c:	60d3      	str	r3, [r2, #12]
	LCD_CTRL_GPIO->OTYPER &= ~(BV(LCD_RS) | BV(LCD_RW) | BV(LCD_EN));
 800054e:	4b12      	ldr	r3, [pc, #72]	@ (8000598 <LcdInit+0xe0>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	4a11      	ldr	r2, [pc, #68]	@ (8000598 <LcdInit+0xe0>)
 8000554:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8000558:	6053      	str	r3, [r2, #4]

	//clear lcd ctrl pins
	LCD_CTRL_GPIO->BSRR = (BV(LCD_RS_CLR) | BV(LCD_RW_CLR) | BV(LCD_EN_CLR));
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <LcdInit+0xe0>)
 800055c:	f44f 0260 	mov.w	r2, #14680064	@ 0xe00000
 8000560:	619a      	str	r2, [r3, #24]

	DelayMs(200);
 8000562:	20c8      	movs	r0, #200	@ 0xc8
 8000564:	f7ff ff02 	bl	800036c <DelayMs>
	// lcd initialization
	// 4-bit mode, 2-line, 5x8 font
	LcdWrite(LCD_CMD, LCD_FN_SET);
 8000568:	2128      	movs	r1, #40	@ 0x28
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff80 	bl	8000470 <LcdWrite>
	// display on, cursor on, blink on
	LcdWrite(LCD_CMD, LCD_DISP_ON);
 8000570:	210f      	movs	r1, #15
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ff7c 	bl	8000470 <LcdWrite>
	// entry mode -- increment address
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 8000578:	2106      	movs	r1, #6
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff ff78 	bl	8000470 <LcdWrite>
	// clear display
	LcdWrite(LCD_CMD, LCD_CLEAR);
 8000580:	2101      	movs	r1, #1
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff ff74 	bl	8000470 <LcdWrite>

	DelayMs(200);
 8000588:	20c8      	movs	r0, #200	@ 0xc8
 800058a:	f7ff feef 	bl	800036c <DelayMs>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800
 8000598:	40020c00 	.word	0x40020c00

0800059c <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
	int i;
	// set lcd line address
	LcdWrite(LCD_CMD, line);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4619      	mov	r1, r3
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ff5f 	bl	8000470 <LcdWrite>
	// send chars to lcd one by one
	for(i=0; str[i]!='\0'; i++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	e00a      	b.n	80005ce <LcdPuts+0x32>
		LcdWrite(LCD_DATA, str[i]);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4619      	mov	r1, r3
 80005c2:	2001      	movs	r0, #1
 80005c4:	f7ff ff54 	bl	8000470 <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1ee      	bne.n	80005b8 <LcdPuts+0x1c>
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <DelayMs+0x44>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <DelayMs+0x48>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000630 <DelayMs+0x4c>)
 80005f8:	fba2 2303 	umull	r2, r3, r2, r3
 80005fc:	099b      	lsrs	r3, r3, #6
 80005fe:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	68ba      	ldr	r2, [r7, #8]
 8000604:	fb02 f303 	mul.w	r3, r2, r3
 8000608:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800060a:	bf00      	nop
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <DelayMs+0x44>)
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	429a      	cmp	r2, r3
 8000618:	d3f8      	bcc.n	800060c <DelayMs+0x28>
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3714      	adds	r7, #20
 8000620:	46bd      	mov	sp, r7
 8000622:	bc80      	pop	{r7}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e0001000 	.word	0xe0001000
 800062c:	20000000 	.word	0x20000000
 8000630:	10624dd3 	.word	0x10624dd3

08000634 <LedInit>:
#include "led.h"
#include "lcd.h"
#include"stm32f4xx.h"

 void  LedInit(uint32_t pin)
 {
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	 RCC->AHB1ENR |=BV(LED_GPIO_EN);
 800063c:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <LedInit+0xac>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000640:	4a27      	ldr	r2, [pc, #156]	@ (80006e0 <LedInit+0xac>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	6313      	str	r3, [r2, #48]	@ 0x30
	 LED_GPIO->MODER&=~BV(pin * 2+1);
 8000648:	4b26      	ldr	r3, [pc, #152]	@ (80006e4 <LedInit+0xb0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	0052      	lsls	r2, r2, #1
 8000650:	3201      	adds	r2, #1
 8000652:	2101      	movs	r1, #1
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	43d2      	mvns	r2, r2
 800065a:	4611      	mov	r1, r2
 800065c:	4a21      	ldr	r2, [pc, #132]	@ (80006e4 <LedInit+0xb0>)
 800065e:	400b      	ands	r3, r1
 8000660:	6013      	str	r3, [r2, #0]
	 LED_GPIO->MODER|=BV(pin *2);
 8000662:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <LedInit+0xb0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	0052      	lsls	r2, r2, #1
 800066a:	2101      	movs	r1, #1
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	4611      	mov	r1, r2
 8000672:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <LedInit+0xb0>)
 8000674:	430b      	orrs	r3, r1
 8000676:	6013      	str	r3, [r2, #0]
	 LED_GPIO->OSPEEDR &=~(BV(pin *2)| BV(pin*2+1));
 8000678:	4b1a      	ldr	r3, [pc, #104]	@ (80006e4 <LedInit+0xb0>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	0052      	lsls	r2, r2, #1
 8000680:	2101      	movs	r1, #1
 8000682:	4091      	lsls	r1, r2
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	3201      	adds	r2, #1
 800068a:	2001      	movs	r0, #1
 800068c:	fa00 f202 	lsl.w	r2, r0, r2
 8000690:	430a      	orrs	r2, r1
 8000692:	43d2      	mvns	r2, r2
 8000694:	4611      	mov	r1, r2
 8000696:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <LedInit+0xb0>)
 8000698:	400b      	ands	r3, r1
 800069a:	6093      	str	r3, [r2, #8]
	 LED_GPIO->PUPDR &=~(BV(pin *2)| BV(pin*2+1));
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <LedInit+0xb0>)
 800069e:	68db      	ldr	r3, [r3, #12]
 80006a0:	687a      	ldr	r2, [r7, #4]
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	2101      	movs	r1, #1
 80006a6:	4091      	lsls	r1, r2
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	0052      	lsls	r2, r2, #1
 80006ac:	3201      	adds	r2, #1
 80006ae:	2001      	movs	r0, #1
 80006b0:	fa00 f202 	lsl.w	r2, r0, r2
 80006b4:	430a      	orrs	r2, r1
 80006b6:	43d2      	mvns	r2, r2
 80006b8:	4611      	mov	r1, r2
 80006ba:	4a0a      	ldr	r2, [pc, #40]	@ (80006e4 <LedInit+0xb0>)
 80006bc:	400b      	ands	r3, r1
 80006be:	60d3      	str	r3, [r2, #12]
	 LED_GPIO->OTYPER &= ~BV(pin);
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <LedInit+0xb0>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	2101      	movs	r1, #1
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	fa01 f202 	lsl.w	r2, r1, r2
 80006cc:	43d2      	mvns	r2, r2
 80006ce:	4611      	mov	r1, r2
 80006d0:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <LedInit+0xb0>)
 80006d2:	400b      	ands	r3, r1
 80006d4:	6053      	str	r3, [r2, #4]

}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020c00 	.word	0x40020c00

080006e8 <LedOn>:


 void LedOn(uint32_t pin){
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	 LED_GPIO->ODR |=BV(pin);
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <LedOn+0x28>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	2101      	movs	r1, #1
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	fa01 f202 	lsl.w	r2, r1, r2
 80006fc:	4611      	mov	r1, r2
 80006fe:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <LedOn+0x28>)
 8000700:	430b      	orrs	r3, r1
 8000702:	6153      	str	r3, [r2, #20]
 }
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40020c00 	.word	0x40020c00

08000714 <LedOff>:

 void LedOff(uint32_t pin)
 {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	 LED_GPIO->ODR &=~BV(pin);
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <LedOff+0x28>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	2101      	movs	r1, #1
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	fa01 f202 	lsl.w	r2, r1, r2
 8000728:	43d2      	mvns	r2, r2
 800072a:	4611      	mov	r1, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	@ (800073c <LedOff+0x28>)
 800072e:	400b      	ands	r3, r1
 8000730:	6153      	str	r3, [r2, #20]

 }
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr
 800073c:	40020c00 	.word	0x40020c00

08000740 <LedBlink>:

 void LedBlink(uint32_t pin , uint32_t delay)
 {
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
	 LedOn(pin);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff ffcc 	bl	80006e8 <LedOn>
	 DelayMs(delay);
 8000750:	6838      	ldr	r0, [r7, #0]
 8000752:	f7ff ff47 	bl	80005e4 <DelayMs>
	 LedOff(pin);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ffdc 	bl	8000714 <LedOff>
 }
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
	SystemInit();
 800076a:	f000 f867 	bl	800083c <SystemInit>
	LedInit(LED_RED);
 800076e:	200e      	movs	r0, #14
 8000770:	f7ff ff60 	bl	8000634 <LedInit>
	SwitchInit(SWITCH);
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff fd97 	bl	80002a8 <SwitchInit>
	int cnt=0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
	char str[16];


	while(1)
	{
		while(exti0_flag == 0)
 800077e:	bf00      	nop
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <main+0x60>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0fb      	beq.n	8000780 <main+0x1c>
			;
		LedBlink(LED_RED,1000);
 8000788:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800078c:	200e      	movs	r0, #14
 800078e:	f7ff ffd7 	bl	8000740 <LedBlink>
		cnt++;
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
		LcdInit();
 8000798:	f7ff fe8e 	bl	80004b8 <LcdInit>
		sprintf(str,"CNT=%d",cnt);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	4909      	ldr	r1, [pc, #36]	@ (80007c8 <main+0x64>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f8aa 	bl	80008fc <siprintf>
		LcdPuts(LCD_LINE1,"ASSIGNMENT");
 80007a8:	4908      	ldr	r1, [pc, #32]	@ (80007cc <main+0x68>)
 80007aa:	2080      	movs	r0, #128	@ 0x80
 80007ac:	f7ff fef6 	bl	800059c <LcdPuts>
		LcdPuts(LCD_LINE2,str);
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	20c0      	movs	r0, #192	@ 0xc0
 80007b6:	f7ff fef1 	bl	800059c <LcdPuts>
		exti0_flag=0;
 80007ba:	4b02      	ldr	r3, [pc, #8]	@ (80007c4 <main+0x60>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
		while(exti0_flag == 0)
 80007c0:	e7dd      	b.n	800077e <main+0x1a>
 80007c2:	bf00      	nop
 80007c4:	20000070 	.word	0x20000070
 80007c8:	08001244 	.word	0x08001244
 80007cc:	0800124c 	.word	0x0800124c

080007d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d8:	4a14      	ldr	r2, [pc, #80]	@ (800082c <_sbrk+0x5c>)
 80007da:	4b15      	ldr	r3, [pc, #84]	@ (8000830 <_sbrk+0x60>)
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e4:	4b13      	ldr	r3, [pc, #76]	@ (8000834 <_sbrk+0x64>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d102      	bne.n	80007f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <_sbrk+0x64>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <_sbrk+0x68>)
 80007f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <_sbrk+0x64>)
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4413      	add	r3, r2
 80007fa:	693a      	ldr	r2, [r7, #16]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	d207      	bcs.n	8000810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000800:	f000 f89c 	bl	800093c <__errno>
 8000804:	4603      	mov	r3, r0
 8000806:	220c      	movs	r2, #12
 8000808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080e:	e009      	b.n	8000824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000810:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <_sbrk+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000816:	4b07      	ldr	r3, [pc, #28]	@ (8000834 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <_sbrk+0x64>)
 8000820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3718      	adds	r7, #24
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20020000 	.word	0x20020000
 8000830:	00000400 	.word	0x00000400
 8000834:	20000074 	.word	0x20000074
 8000838:	200001c0 	.word	0x200001c0

0800083c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000840:	f000 f802 	bl	8000848 <DWT_Init>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800084c:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <DWT_Init+0x58>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <DWT_Init+0x58>)
 8000852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000856:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000858:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <DWT_Init+0x58>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <DWT_Init+0x58>)
 800085e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000862:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <DWT_Init+0x5c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <DWT_Init+0x5c>)
 800086a:	f023 0301 	bic.w	r3, r3, #1
 800086e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <DWT_Init+0x5c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0b      	ldr	r2, [pc, #44]	@ (80008a4 <DWT_Init+0x5c>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <DWT_Init+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000882:	bf00      	nop
    __ASM volatile ("NOP");
 8000884:	bf00      	nop
    __ASM volatile ("NOP");
 8000886:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <DWT_Init+0x5c>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b00      	cmp	r3, #0
 800088e:	bf0c      	ite	eq
 8000890:	2301      	moveq	r3, #1
 8000892:	2300      	movne	r3, #0
 8000894:	b2db      	uxtb	r3, r3
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000edf0 	.word	0xe000edf0
 80008a4:	e0001000 	.word	0xe0001000

080008a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008a8:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ac:	f7ff ffc6 	bl	800083c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	@ (80008e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	@ (80008e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	@ (80008ec <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	@ (80008f4 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008d6:	f000 f837 	bl	8000948 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008da:	f7ff ff43 	bl	8000764 <main>

080008de <LoopForever>:

LoopForever:
  b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
  ldr   r0, =_estack
 80008e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80008ec:	0800129c 	.word	0x0800129c
  ldr r2, =_sbss
 80008f0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80008f4:	200001c0 	.word	0x200001c0

080008f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC_IRQHandler>
	...

080008fc <siprintf>:
 80008fc:	b40e      	push	{r1, r2, r3}
 80008fe:	b500      	push	{lr}
 8000900:	b09c      	sub	sp, #112	@ 0x70
 8000902:	ab1d      	add	r3, sp, #116	@ 0x74
 8000904:	9002      	str	r0, [sp, #8]
 8000906:	9006      	str	r0, [sp, #24]
 8000908:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800090c:	4809      	ldr	r0, [pc, #36]	@ (8000934 <siprintf+0x38>)
 800090e:	9107      	str	r1, [sp, #28]
 8000910:	9104      	str	r1, [sp, #16]
 8000912:	4909      	ldr	r1, [pc, #36]	@ (8000938 <siprintf+0x3c>)
 8000914:	f853 2b04 	ldr.w	r2, [r3], #4
 8000918:	9105      	str	r1, [sp, #20]
 800091a:	6800      	ldr	r0, [r0, #0]
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	a902      	add	r1, sp, #8
 8000920:	f000 f894 	bl	8000a4c <_svfiprintf_r>
 8000924:	9b02      	ldr	r3, [sp, #8]
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	b01c      	add	sp, #112	@ 0x70
 800092c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000930:	b003      	add	sp, #12
 8000932:	4770      	bx	lr
 8000934:	20000004 	.word	0x20000004
 8000938:	ffff0208 	.word	0xffff0208

0800093c <__errno>:
 800093c:	4b01      	ldr	r3, [pc, #4]	@ (8000944 <__errno+0x8>)
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	20000004 	.word	0x20000004

08000948 <__libc_init_array>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	4d0d      	ldr	r5, [pc, #52]	@ (8000980 <__libc_init_array+0x38>)
 800094c:	4c0d      	ldr	r4, [pc, #52]	@ (8000984 <__libc_init_array+0x3c>)
 800094e:	1b64      	subs	r4, r4, r5
 8000950:	10a4      	asrs	r4, r4, #2
 8000952:	2600      	movs	r6, #0
 8000954:	42a6      	cmp	r6, r4
 8000956:	d109      	bne.n	800096c <__libc_init_array+0x24>
 8000958:	4d0b      	ldr	r5, [pc, #44]	@ (8000988 <__libc_init_array+0x40>)
 800095a:	4c0c      	ldr	r4, [pc, #48]	@ (800098c <__libc_init_array+0x44>)
 800095c:	f000 fc66 	bl	800122c <_init>
 8000960:	1b64      	subs	r4, r4, r5
 8000962:	10a4      	asrs	r4, r4, #2
 8000964:	2600      	movs	r6, #0
 8000966:	42a6      	cmp	r6, r4
 8000968:	d105      	bne.n	8000976 <__libc_init_array+0x2e>
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000970:	4798      	blx	r3
 8000972:	3601      	adds	r6, #1
 8000974:	e7ee      	b.n	8000954 <__libc_init_array+0xc>
 8000976:	f855 3b04 	ldr.w	r3, [r5], #4
 800097a:	4798      	blx	r3
 800097c:	3601      	adds	r6, #1
 800097e:	e7f2      	b.n	8000966 <__libc_init_array+0x1e>
 8000980:	08001294 	.word	0x08001294
 8000984:	08001294 	.word	0x08001294
 8000988:	08001294 	.word	0x08001294
 800098c:	08001298 	.word	0x08001298

08000990 <__retarget_lock_acquire_recursive>:
 8000990:	4770      	bx	lr

08000992 <__retarget_lock_release_recursive>:
 8000992:	4770      	bx	lr

08000994 <__ssputs_r>:
 8000994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000998:	688e      	ldr	r6, [r1, #8]
 800099a:	461f      	mov	r7, r3
 800099c:	42be      	cmp	r6, r7
 800099e:	680b      	ldr	r3, [r1, #0]
 80009a0:	4682      	mov	sl, r0
 80009a2:	460c      	mov	r4, r1
 80009a4:	4690      	mov	r8, r2
 80009a6:	d82d      	bhi.n	8000a04 <__ssputs_r+0x70>
 80009a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80009b0:	d026      	beq.n	8000a00 <__ssputs_r+0x6c>
 80009b2:	6965      	ldr	r5, [r4, #20]
 80009b4:	6909      	ldr	r1, [r1, #16]
 80009b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009ba:	eba3 0901 	sub.w	r9, r3, r1
 80009be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009c2:	1c7b      	adds	r3, r7, #1
 80009c4:	444b      	add	r3, r9
 80009c6:	106d      	asrs	r5, r5, #1
 80009c8:	429d      	cmp	r5, r3
 80009ca:	bf38      	it	cc
 80009cc:	461d      	movcc	r5, r3
 80009ce:	0553      	lsls	r3, r2, #21
 80009d0:	d527      	bpl.n	8000a22 <__ssputs_r+0x8e>
 80009d2:	4629      	mov	r1, r5
 80009d4:	f000 f958 	bl	8000c88 <_malloc_r>
 80009d8:	4606      	mov	r6, r0
 80009da:	b360      	cbz	r0, 8000a36 <__ssputs_r+0xa2>
 80009dc:	6921      	ldr	r1, [r4, #16]
 80009de:	464a      	mov	r2, r9
 80009e0:	f000 fbc4 	bl	800116c <memcpy>
 80009e4:	89a3      	ldrh	r3, [r4, #12]
 80009e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80009ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ee:	81a3      	strh	r3, [r4, #12]
 80009f0:	6126      	str	r6, [r4, #16]
 80009f2:	6165      	str	r5, [r4, #20]
 80009f4:	444e      	add	r6, r9
 80009f6:	eba5 0509 	sub.w	r5, r5, r9
 80009fa:	6026      	str	r6, [r4, #0]
 80009fc:	60a5      	str	r5, [r4, #8]
 80009fe:	463e      	mov	r6, r7
 8000a00:	42be      	cmp	r6, r7
 8000a02:	d900      	bls.n	8000a06 <__ssputs_r+0x72>
 8000a04:	463e      	mov	r6, r7
 8000a06:	6820      	ldr	r0, [r4, #0]
 8000a08:	4632      	mov	r2, r6
 8000a0a:	4641      	mov	r1, r8
 8000a0c:	f000 fb84 	bl	8001118 <memmove>
 8000a10:	68a3      	ldr	r3, [r4, #8]
 8000a12:	1b9b      	subs	r3, r3, r6
 8000a14:	60a3      	str	r3, [r4, #8]
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	4433      	add	r3, r6
 8000a1a:	6023      	str	r3, [r4, #0]
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a22:	462a      	mov	r2, r5
 8000a24:	f000 fb4a 	bl	80010bc <_realloc_r>
 8000a28:	4606      	mov	r6, r0
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d1e0      	bne.n	80009f0 <__ssputs_r+0x5c>
 8000a2e:	6921      	ldr	r1, [r4, #16]
 8000a30:	4650      	mov	r0, sl
 8000a32:	f000 fba9 	bl	8001188 <_free_r>
 8000a36:	230c      	movs	r3, #12
 8000a38:	f8ca 3000 	str.w	r3, [sl]
 8000a3c:	89a3      	ldrh	r3, [r4, #12]
 8000a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a42:	81a3      	strh	r3, [r4, #12]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a48:	e7e9      	b.n	8000a1e <__ssputs_r+0x8a>
	...

08000a4c <_svfiprintf_r>:
 8000a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a50:	4698      	mov	r8, r3
 8000a52:	898b      	ldrh	r3, [r1, #12]
 8000a54:	061b      	lsls	r3, r3, #24
 8000a56:	b09d      	sub	sp, #116	@ 0x74
 8000a58:	4607      	mov	r7, r0
 8000a5a:	460d      	mov	r5, r1
 8000a5c:	4614      	mov	r4, r2
 8000a5e:	d510      	bpl.n	8000a82 <_svfiprintf_r+0x36>
 8000a60:	690b      	ldr	r3, [r1, #16]
 8000a62:	b973      	cbnz	r3, 8000a82 <_svfiprintf_r+0x36>
 8000a64:	2140      	movs	r1, #64	@ 0x40
 8000a66:	f000 f90f 	bl	8000c88 <_malloc_r>
 8000a6a:	6028      	str	r0, [r5, #0]
 8000a6c:	6128      	str	r0, [r5, #16]
 8000a6e:	b930      	cbnz	r0, 8000a7e <_svfiprintf_r+0x32>
 8000a70:	230c      	movs	r3, #12
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a78:	b01d      	add	sp, #116	@ 0x74
 8000a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a7e:	2340      	movs	r3, #64	@ 0x40
 8000a80:	616b      	str	r3, [r5, #20]
 8000a82:	2300      	movs	r3, #0
 8000a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a86:	2320      	movs	r3, #32
 8000a88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a90:	2330      	movs	r3, #48	@ 0x30
 8000a92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c30 <_svfiprintf_r+0x1e4>
 8000a96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000a9a:	f04f 0901 	mov.w	r9, #1
 8000a9e:	4623      	mov	r3, r4
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000aa6:	b10a      	cbz	r2, 8000aac <_svfiprintf_r+0x60>
 8000aa8:	2a25      	cmp	r2, #37	@ 0x25
 8000aaa:	d1f9      	bne.n	8000aa0 <_svfiprintf_r+0x54>
 8000aac:	ebba 0b04 	subs.w	fp, sl, r4
 8000ab0:	d00b      	beq.n	8000aca <_svfiprintf_r+0x7e>
 8000ab2:	465b      	mov	r3, fp
 8000ab4:	4622      	mov	r2, r4
 8000ab6:	4629      	mov	r1, r5
 8000ab8:	4638      	mov	r0, r7
 8000aba:	f7ff ff6b 	bl	8000994 <__ssputs_r>
 8000abe:	3001      	adds	r0, #1
 8000ac0:	f000 80a7 	beq.w	8000c12 <_svfiprintf_r+0x1c6>
 8000ac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ac6:	445a      	add	r2, fp
 8000ac8:	9209      	str	r2, [sp, #36]	@ 0x24
 8000aca:	f89a 3000 	ldrb.w	r3, [sl]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f000 809f 	beq.w	8000c12 <_svfiprintf_r+0x1c6>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ade:	f10a 0a01 	add.w	sl, sl, #1
 8000ae2:	9304      	str	r3, [sp, #16]
 8000ae4:	9307      	str	r3, [sp, #28]
 8000ae6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000aea:	931a      	str	r3, [sp, #104]	@ 0x68
 8000aec:	4654      	mov	r4, sl
 8000aee:	2205      	movs	r2, #5
 8000af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000af4:	484e      	ldr	r0, [pc, #312]	@ (8000c30 <_svfiprintf_r+0x1e4>)
 8000af6:	f7ff fb6b 	bl	80001d0 <memchr>
 8000afa:	9a04      	ldr	r2, [sp, #16]
 8000afc:	b9d8      	cbnz	r0, 8000b36 <_svfiprintf_r+0xea>
 8000afe:	06d0      	lsls	r0, r2, #27
 8000b00:	bf44      	itt	mi
 8000b02:	2320      	movmi	r3, #32
 8000b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b08:	0711      	lsls	r1, r2, #28
 8000b0a:	bf44      	itt	mi
 8000b0c:	232b      	movmi	r3, #43	@ 0x2b
 8000b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b12:	f89a 3000 	ldrb.w	r3, [sl]
 8000b16:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b18:	d015      	beq.n	8000b46 <_svfiprintf_r+0xfa>
 8000b1a:	9a07      	ldr	r2, [sp, #28]
 8000b1c:	4654      	mov	r4, sl
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f04f 0c0a 	mov.w	ip, #10
 8000b24:	4621      	mov	r1, r4
 8000b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b2a:	3b30      	subs	r3, #48	@ 0x30
 8000b2c:	2b09      	cmp	r3, #9
 8000b2e:	d94b      	bls.n	8000bc8 <_svfiprintf_r+0x17c>
 8000b30:	b1b0      	cbz	r0, 8000b60 <_svfiprintf_r+0x114>
 8000b32:	9207      	str	r2, [sp, #28]
 8000b34:	e014      	b.n	8000b60 <_svfiprintf_r+0x114>
 8000b36:	eba0 0308 	sub.w	r3, r0, r8
 8000b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	9304      	str	r3, [sp, #16]
 8000b42:	46a2      	mov	sl, r4
 8000b44:	e7d2      	b.n	8000aec <_svfiprintf_r+0xa0>
 8000b46:	9b03      	ldr	r3, [sp, #12]
 8000b48:	1d19      	adds	r1, r3, #4
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	9103      	str	r1, [sp, #12]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	bfbb      	ittet	lt
 8000b52:	425b      	neglt	r3, r3
 8000b54:	f042 0202 	orrlt.w	r2, r2, #2
 8000b58:	9307      	strge	r3, [sp, #28]
 8000b5a:	9307      	strlt	r3, [sp, #28]
 8000b5c:	bfb8      	it	lt
 8000b5e:	9204      	strlt	r2, [sp, #16]
 8000b60:	7823      	ldrb	r3, [r4, #0]
 8000b62:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b64:	d10a      	bne.n	8000b7c <_svfiprintf_r+0x130>
 8000b66:	7863      	ldrb	r3, [r4, #1]
 8000b68:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b6a:	d132      	bne.n	8000bd2 <_svfiprintf_r+0x186>
 8000b6c:	9b03      	ldr	r3, [sp, #12]
 8000b6e:	1d1a      	adds	r2, r3, #4
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	9203      	str	r2, [sp, #12]
 8000b74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b78:	3402      	adds	r4, #2
 8000b7a:	9305      	str	r3, [sp, #20]
 8000b7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000c34 <_svfiprintf_r+0x1e8>
 8000b80:	7821      	ldrb	r1, [r4, #0]
 8000b82:	2203      	movs	r2, #3
 8000b84:	4650      	mov	r0, sl
 8000b86:	f7ff fb23 	bl	80001d0 <memchr>
 8000b8a:	b138      	cbz	r0, 8000b9c <_svfiprintf_r+0x150>
 8000b8c:	9b04      	ldr	r3, [sp, #16]
 8000b8e:	eba0 000a 	sub.w	r0, r0, sl
 8000b92:	2240      	movs	r2, #64	@ 0x40
 8000b94:	4082      	lsls	r2, r0
 8000b96:	4313      	orrs	r3, r2
 8000b98:	3401      	adds	r4, #1
 8000b9a:	9304      	str	r3, [sp, #16]
 8000b9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba0:	4825      	ldr	r0, [pc, #148]	@ (8000c38 <_svfiprintf_r+0x1ec>)
 8000ba2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ba6:	2206      	movs	r2, #6
 8000ba8:	f7ff fb12 	bl	80001d0 <memchr>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d036      	beq.n	8000c1e <_svfiprintf_r+0x1d2>
 8000bb0:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <_svfiprintf_r+0x1f0>)
 8000bb2:	bb1b      	cbnz	r3, 8000bfc <_svfiprintf_r+0x1b0>
 8000bb4:	9b03      	ldr	r3, [sp, #12]
 8000bb6:	3307      	adds	r3, #7
 8000bb8:	f023 0307 	bic.w	r3, r3, #7
 8000bbc:	3308      	adds	r3, #8
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000bc2:	4433      	add	r3, r6
 8000bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bc6:	e76a      	b.n	8000a9e <_svfiprintf_r+0x52>
 8000bc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bcc:	460c      	mov	r4, r1
 8000bce:	2001      	movs	r0, #1
 8000bd0:	e7a8      	b.n	8000b24 <_svfiprintf_r+0xd8>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	3401      	adds	r4, #1
 8000bd6:	9305      	str	r3, [sp, #20]
 8000bd8:	4619      	mov	r1, r3
 8000bda:	f04f 0c0a 	mov.w	ip, #10
 8000bde:	4620      	mov	r0, r4
 8000be0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000be4:	3a30      	subs	r2, #48	@ 0x30
 8000be6:	2a09      	cmp	r2, #9
 8000be8:	d903      	bls.n	8000bf2 <_svfiprintf_r+0x1a6>
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d0c6      	beq.n	8000b7c <_svfiprintf_r+0x130>
 8000bee:	9105      	str	r1, [sp, #20]
 8000bf0:	e7c4      	b.n	8000b7c <_svfiprintf_r+0x130>
 8000bf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e7f0      	b.n	8000bde <_svfiprintf_r+0x192>
 8000bfc:	ab03      	add	r3, sp, #12
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	462a      	mov	r2, r5
 8000c02:	4b0f      	ldr	r3, [pc, #60]	@ (8000c40 <_svfiprintf_r+0x1f4>)
 8000c04:	a904      	add	r1, sp, #16
 8000c06:	4638      	mov	r0, r7
 8000c08:	f3af 8000 	nop.w
 8000c0c:	1c42      	adds	r2, r0, #1
 8000c0e:	4606      	mov	r6, r0
 8000c10:	d1d6      	bne.n	8000bc0 <_svfiprintf_r+0x174>
 8000c12:	89ab      	ldrh	r3, [r5, #12]
 8000c14:	065b      	lsls	r3, r3, #25
 8000c16:	f53f af2d 	bmi.w	8000a74 <_svfiprintf_r+0x28>
 8000c1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c1c:	e72c      	b.n	8000a78 <_svfiprintf_r+0x2c>
 8000c1e:	ab03      	add	r3, sp, #12
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	462a      	mov	r2, r5
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <_svfiprintf_r+0x1f4>)
 8000c26:	a904      	add	r1, sp, #16
 8000c28:	4638      	mov	r0, r7
 8000c2a:	f000 f91b 	bl	8000e64 <_printf_i>
 8000c2e:	e7ed      	b.n	8000c0c <_svfiprintf_r+0x1c0>
 8000c30:	08001257 	.word	0x08001257
 8000c34:	0800125d 	.word	0x0800125d
 8000c38:	08001261 	.word	0x08001261
 8000c3c:	00000000 	.word	0x00000000
 8000c40:	08000995 	.word	0x08000995

08000c44 <sbrk_aligned>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	4e0f      	ldr	r6, [pc, #60]	@ (8000c84 <sbrk_aligned+0x40>)
 8000c48:	460c      	mov	r4, r1
 8000c4a:	6831      	ldr	r1, [r6, #0]
 8000c4c:	4605      	mov	r5, r0
 8000c4e:	b911      	cbnz	r1, 8000c56 <sbrk_aligned+0x12>
 8000c50:	f000 fa7c 	bl	800114c <_sbrk_r>
 8000c54:	6030      	str	r0, [r6, #0]
 8000c56:	4621      	mov	r1, r4
 8000c58:	4628      	mov	r0, r5
 8000c5a:	f000 fa77 	bl	800114c <_sbrk_r>
 8000c5e:	1c43      	adds	r3, r0, #1
 8000c60:	d103      	bne.n	8000c6a <sbrk_aligned+0x26>
 8000c62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c66:	4620      	mov	r0, r4
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
 8000c6a:	1cc4      	adds	r4, r0, #3
 8000c6c:	f024 0403 	bic.w	r4, r4, #3
 8000c70:	42a0      	cmp	r0, r4
 8000c72:	d0f8      	beq.n	8000c66 <sbrk_aligned+0x22>
 8000c74:	1a21      	subs	r1, r4, r0
 8000c76:	4628      	mov	r0, r5
 8000c78:	f000 fa68 	bl	800114c <_sbrk_r>
 8000c7c:	3001      	adds	r0, #1
 8000c7e:	d1f2      	bne.n	8000c66 <sbrk_aligned+0x22>
 8000c80:	e7ef      	b.n	8000c62 <sbrk_aligned+0x1e>
 8000c82:	bf00      	nop
 8000c84:	200001b4 	.word	0x200001b4

08000c88 <_malloc_r>:
 8000c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c8c:	1ccd      	adds	r5, r1, #3
 8000c8e:	f025 0503 	bic.w	r5, r5, #3
 8000c92:	3508      	adds	r5, #8
 8000c94:	2d0c      	cmp	r5, #12
 8000c96:	bf38      	it	cc
 8000c98:	250c      	movcc	r5, #12
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	4606      	mov	r6, r0
 8000c9e:	db01      	blt.n	8000ca4 <_malloc_r+0x1c>
 8000ca0:	42a9      	cmp	r1, r5
 8000ca2:	d904      	bls.n	8000cae <_malloc_r+0x26>
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	6033      	str	r3, [r6, #0]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d84 <_malloc_r+0xfc>
 8000cb2:	f000 f9f7 	bl	80010a4 <__malloc_lock>
 8000cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8000cba:	461c      	mov	r4, r3
 8000cbc:	bb44      	cbnz	r4, 8000d10 <_malloc_r+0x88>
 8000cbe:	4629      	mov	r1, r5
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	f7ff ffbf 	bl	8000c44 <sbrk_aligned>
 8000cc6:	1c43      	adds	r3, r0, #1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	d158      	bne.n	8000d7e <_malloc_r+0xf6>
 8000ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8000cd0:	4627      	mov	r7, r4
 8000cd2:	2f00      	cmp	r7, #0
 8000cd4:	d143      	bne.n	8000d5e <_malloc_r+0xd6>
 8000cd6:	2c00      	cmp	r4, #0
 8000cd8:	d04b      	beq.n	8000d72 <_malloc_r+0xea>
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	4639      	mov	r1, r7
 8000cde:	4630      	mov	r0, r6
 8000ce0:	eb04 0903 	add.w	r9, r4, r3
 8000ce4:	f000 fa32 	bl	800114c <_sbrk_r>
 8000ce8:	4581      	cmp	r9, r0
 8000cea:	d142      	bne.n	8000d72 <_malloc_r+0xea>
 8000cec:	6821      	ldr	r1, [r4, #0]
 8000cee:	1a6d      	subs	r5, r5, r1
 8000cf0:	4629      	mov	r1, r5
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	f7ff ffa6 	bl	8000c44 <sbrk_aligned>
 8000cf8:	3001      	adds	r0, #1
 8000cfa:	d03a      	beq.n	8000d72 <_malloc_r+0xea>
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	442b      	add	r3, r5
 8000d00:	6023      	str	r3, [r4, #0]
 8000d02:	f8d8 3000 	ldr.w	r3, [r8]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	bb62      	cbnz	r2, 8000d64 <_malloc_r+0xdc>
 8000d0a:	f8c8 7000 	str.w	r7, [r8]
 8000d0e:	e00f      	b.n	8000d30 <_malloc_r+0xa8>
 8000d10:	6822      	ldr	r2, [r4, #0]
 8000d12:	1b52      	subs	r2, r2, r5
 8000d14:	d420      	bmi.n	8000d58 <_malloc_r+0xd0>
 8000d16:	2a0b      	cmp	r2, #11
 8000d18:	d917      	bls.n	8000d4a <_malloc_r+0xc2>
 8000d1a:	1961      	adds	r1, r4, r5
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	6025      	str	r5, [r4, #0]
 8000d20:	bf18      	it	ne
 8000d22:	6059      	strne	r1, [r3, #4]
 8000d24:	6863      	ldr	r3, [r4, #4]
 8000d26:	bf08      	it	eq
 8000d28:	f8c8 1000 	streq.w	r1, [r8]
 8000d2c:	5162      	str	r2, [r4, r5]
 8000d2e:	604b      	str	r3, [r1, #4]
 8000d30:	4630      	mov	r0, r6
 8000d32:	f000 f9bd 	bl	80010b0 <__malloc_unlock>
 8000d36:	f104 000b 	add.w	r0, r4, #11
 8000d3a:	1d23      	adds	r3, r4, #4
 8000d3c:	f020 0007 	bic.w	r0, r0, #7
 8000d40:	1ac2      	subs	r2, r0, r3
 8000d42:	bf1c      	itt	ne
 8000d44:	1a1b      	subne	r3, r3, r0
 8000d46:	50a3      	strne	r3, [r4, r2]
 8000d48:	e7af      	b.n	8000caa <_malloc_r+0x22>
 8000d4a:	6862      	ldr	r2, [r4, #4]
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	bf0c      	ite	eq
 8000d50:	f8c8 2000 	streq.w	r2, [r8]
 8000d54:	605a      	strne	r2, [r3, #4]
 8000d56:	e7eb      	b.n	8000d30 <_malloc_r+0xa8>
 8000d58:	4623      	mov	r3, r4
 8000d5a:	6864      	ldr	r4, [r4, #4]
 8000d5c:	e7ae      	b.n	8000cbc <_malloc_r+0x34>
 8000d5e:	463c      	mov	r4, r7
 8000d60:	687f      	ldr	r7, [r7, #4]
 8000d62:	e7b6      	b.n	8000cd2 <_malloc_r+0x4a>
 8000d64:	461a      	mov	r2, r3
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	42a3      	cmp	r3, r4
 8000d6a:	d1fb      	bne.n	8000d64 <_malloc_r+0xdc>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	6053      	str	r3, [r2, #4]
 8000d70:	e7de      	b.n	8000d30 <_malloc_r+0xa8>
 8000d72:	230c      	movs	r3, #12
 8000d74:	6033      	str	r3, [r6, #0]
 8000d76:	4630      	mov	r0, r6
 8000d78:	f000 f99a 	bl	80010b0 <__malloc_unlock>
 8000d7c:	e794      	b.n	8000ca8 <_malloc_r+0x20>
 8000d7e:	6005      	str	r5, [r0, #0]
 8000d80:	e7d6      	b.n	8000d30 <_malloc_r+0xa8>
 8000d82:	bf00      	nop
 8000d84:	200001b8 	.word	0x200001b8

08000d88 <_printf_common>:
 8000d88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d8c:	4616      	mov	r6, r2
 8000d8e:	4698      	mov	r8, r3
 8000d90:	688a      	ldr	r2, [r1, #8]
 8000d92:	690b      	ldr	r3, [r1, #16]
 8000d94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	bfb8      	it	lt
 8000d9c:	4613      	movlt	r3, r2
 8000d9e:	6033      	str	r3, [r6, #0]
 8000da0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000da4:	4607      	mov	r7, r0
 8000da6:	460c      	mov	r4, r1
 8000da8:	b10a      	cbz	r2, 8000dae <_printf_common+0x26>
 8000daa:	3301      	adds	r3, #1
 8000dac:	6033      	str	r3, [r6, #0]
 8000dae:	6823      	ldr	r3, [r4, #0]
 8000db0:	0699      	lsls	r1, r3, #26
 8000db2:	bf42      	ittt	mi
 8000db4:	6833      	ldrmi	r3, [r6, #0]
 8000db6:	3302      	addmi	r3, #2
 8000db8:	6033      	strmi	r3, [r6, #0]
 8000dba:	6825      	ldr	r5, [r4, #0]
 8000dbc:	f015 0506 	ands.w	r5, r5, #6
 8000dc0:	d106      	bne.n	8000dd0 <_printf_common+0x48>
 8000dc2:	f104 0a19 	add.w	sl, r4, #25
 8000dc6:	68e3      	ldr	r3, [r4, #12]
 8000dc8:	6832      	ldr	r2, [r6, #0]
 8000dca:	1a9b      	subs	r3, r3, r2
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	dc26      	bgt.n	8000e1e <_printf_common+0x96>
 8000dd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000dd4:	6822      	ldr	r2, [r4, #0]
 8000dd6:	3b00      	subs	r3, #0
 8000dd8:	bf18      	it	ne
 8000dda:	2301      	movne	r3, #1
 8000ddc:	0692      	lsls	r2, r2, #26
 8000dde:	d42b      	bmi.n	8000e38 <_printf_common+0xb0>
 8000de0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000de4:	4641      	mov	r1, r8
 8000de6:	4638      	mov	r0, r7
 8000de8:	47c8      	blx	r9
 8000dea:	3001      	adds	r0, #1
 8000dec:	d01e      	beq.n	8000e2c <_printf_common+0xa4>
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	6922      	ldr	r2, [r4, #16]
 8000df2:	f003 0306 	and.w	r3, r3, #6
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	bf02      	ittt	eq
 8000dfa:	68e5      	ldreq	r5, [r4, #12]
 8000dfc:	6833      	ldreq	r3, [r6, #0]
 8000dfe:	1aed      	subeq	r5, r5, r3
 8000e00:	68a3      	ldr	r3, [r4, #8]
 8000e02:	bf0c      	ite	eq
 8000e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e08:	2500      	movne	r5, #0
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	bfc4      	itt	gt
 8000e0e:	1a9b      	subgt	r3, r3, r2
 8000e10:	18ed      	addgt	r5, r5, r3
 8000e12:	2600      	movs	r6, #0
 8000e14:	341a      	adds	r4, #26
 8000e16:	42b5      	cmp	r5, r6
 8000e18:	d11a      	bne.n	8000e50 <_printf_common+0xc8>
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	e008      	b.n	8000e30 <_printf_common+0xa8>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	4652      	mov	r2, sl
 8000e22:	4641      	mov	r1, r8
 8000e24:	4638      	mov	r0, r7
 8000e26:	47c8      	blx	r9
 8000e28:	3001      	adds	r0, #1
 8000e2a:	d103      	bne.n	8000e34 <_printf_common+0xac>
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e34:	3501      	adds	r5, #1
 8000e36:	e7c6      	b.n	8000dc6 <_printf_common+0x3e>
 8000e38:	18e1      	adds	r1, r4, r3
 8000e3a:	1c5a      	adds	r2, r3, #1
 8000e3c:	2030      	movs	r0, #48	@ 0x30
 8000e3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e42:	4422      	add	r2, r4
 8000e44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	e7c7      	b.n	8000de0 <_printf_common+0x58>
 8000e50:	2301      	movs	r3, #1
 8000e52:	4622      	mov	r2, r4
 8000e54:	4641      	mov	r1, r8
 8000e56:	4638      	mov	r0, r7
 8000e58:	47c8      	blx	r9
 8000e5a:	3001      	adds	r0, #1
 8000e5c:	d0e6      	beq.n	8000e2c <_printf_common+0xa4>
 8000e5e:	3601      	adds	r6, #1
 8000e60:	e7d9      	b.n	8000e16 <_printf_common+0x8e>
	...

08000e64 <_printf_i>:
 8000e64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e68:	7e0f      	ldrb	r7, [r1, #24]
 8000e6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e6c:	2f78      	cmp	r7, #120	@ 0x78
 8000e6e:	4691      	mov	r9, r2
 8000e70:	4680      	mov	r8, r0
 8000e72:	460c      	mov	r4, r1
 8000e74:	469a      	mov	sl, r3
 8000e76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e7a:	d807      	bhi.n	8000e8c <_printf_i+0x28>
 8000e7c:	2f62      	cmp	r7, #98	@ 0x62
 8000e7e:	d80a      	bhi.n	8000e96 <_printf_i+0x32>
 8000e80:	2f00      	cmp	r7, #0
 8000e82:	f000 80d2 	beq.w	800102a <_printf_i+0x1c6>
 8000e86:	2f58      	cmp	r7, #88	@ 0x58
 8000e88:	f000 80b9 	beq.w	8000ffe <_printf_i+0x19a>
 8000e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e94:	e03a      	b.n	8000f0c <_printf_i+0xa8>
 8000e96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e9a:	2b15      	cmp	r3, #21
 8000e9c:	d8f6      	bhi.n	8000e8c <_printf_i+0x28>
 8000e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8000ea4 <_printf_i+0x40>)
 8000ea0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ea4:	08000efd 	.word	0x08000efd
 8000ea8:	08000f11 	.word	0x08000f11
 8000eac:	08000e8d 	.word	0x08000e8d
 8000eb0:	08000e8d 	.word	0x08000e8d
 8000eb4:	08000e8d 	.word	0x08000e8d
 8000eb8:	08000e8d 	.word	0x08000e8d
 8000ebc:	08000f11 	.word	0x08000f11
 8000ec0:	08000e8d 	.word	0x08000e8d
 8000ec4:	08000e8d 	.word	0x08000e8d
 8000ec8:	08000e8d 	.word	0x08000e8d
 8000ecc:	08000e8d 	.word	0x08000e8d
 8000ed0:	08001011 	.word	0x08001011
 8000ed4:	08000f3b 	.word	0x08000f3b
 8000ed8:	08000fcb 	.word	0x08000fcb
 8000edc:	08000e8d 	.word	0x08000e8d
 8000ee0:	08000e8d 	.word	0x08000e8d
 8000ee4:	08001033 	.word	0x08001033
 8000ee8:	08000e8d 	.word	0x08000e8d
 8000eec:	08000f3b 	.word	0x08000f3b
 8000ef0:	08000e8d 	.word	0x08000e8d
 8000ef4:	08000e8d 	.word	0x08000e8d
 8000ef8:	08000fd3 	.word	0x08000fd3
 8000efc:	6833      	ldr	r3, [r6, #0]
 8000efe:	1d1a      	adds	r2, r3, #4
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6032      	str	r2, [r6, #0]
 8000f04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e09d      	b.n	800104c <_printf_i+0x1e8>
 8000f10:	6833      	ldr	r3, [r6, #0]
 8000f12:	6820      	ldr	r0, [r4, #0]
 8000f14:	1d19      	adds	r1, r3, #4
 8000f16:	6031      	str	r1, [r6, #0]
 8000f18:	0606      	lsls	r6, r0, #24
 8000f1a:	d501      	bpl.n	8000f20 <_printf_i+0xbc>
 8000f1c:	681d      	ldr	r5, [r3, #0]
 8000f1e:	e003      	b.n	8000f28 <_printf_i+0xc4>
 8000f20:	0645      	lsls	r5, r0, #25
 8000f22:	d5fb      	bpl.n	8000f1c <_printf_i+0xb8>
 8000f24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f28:	2d00      	cmp	r5, #0
 8000f2a:	da03      	bge.n	8000f34 <_printf_i+0xd0>
 8000f2c:	232d      	movs	r3, #45	@ 0x2d
 8000f2e:	426d      	negs	r5, r5
 8000f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f34:	4859      	ldr	r0, [pc, #356]	@ (800109c <_printf_i+0x238>)
 8000f36:	230a      	movs	r3, #10
 8000f38:	e011      	b.n	8000f5e <_printf_i+0xfa>
 8000f3a:	6821      	ldr	r1, [r4, #0]
 8000f3c:	6833      	ldr	r3, [r6, #0]
 8000f3e:	0608      	lsls	r0, r1, #24
 8000f40:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f44:	d402      	bmi.n	8000f4c <_printf_i+0xe8>
 8000f46:	0649      	lsls	r1, r1, #25
 8000f48:	bf48      	it	mi
 8000f4a:	b2ad      	uxthmi	r5, r5
 8000f4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f4e:	4853      	ldr	r0, [pc, #332]	@ (800109c <_printf_i+0x238>)
 8000f50:	6033      	str	r3, [r6, #0]
 8000f52:	bf14      	ite	ne
 8000f54:	230a      	movne	r3, #10
 8000f56:	2308      	moveq	r3, #8
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f5e:	6866      	ldr	r6, [r4, #4]
 8000f60:	60a6      	str	r6, [r4, #8]
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	bfa2      	ittt	ge
 8000f66:	6821      	ldrge	r1, [r4, #0]
 8000f68:	f021 0104 	bicge.w	r1, r1, #4
 8000f6c:	6021      	strge	r1, [r4, #0]
 8000f6e:	b90d      	cbnz	r5, 8000f74 <_printf_i+0x110>
 8000f70:	2e00      	cmp	r6, #0
 8000f72:	d04b      	beq.n	800100c <_printf_i+0x1a8>
 8000f74:	4616      	mov	r6, r2
 8000f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8000f7e:	5dc7      	ldrb	r7, [r0, r7]
 8000f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f84:	462f      	mov	r7, r5
 8000f86:	42bb      	cmp	r3, r7
 8000f88:	460d      	mov	r5, r1
 8000f8a:	d9f4      	bls.n	8000f76 <_printf_i+0x112>
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d10b      	bne.n	8000fa8 <_printf_i+0x144>
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	07df      	lsls	r7, r3, #31
 8000f94:	d508      	bpl.n	8000fa8 <_printf_i+0x144>
 8000f96:	6923      	ldr	r3, [r4, #16]
 8000f98:	6861      	ldr	r1, [r4, #4]
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	bfde      	ittt	le
 8000f9e:	2330      	movle	r3, #48	@ 0x30
 8000fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fa4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000fa8:	1b92      	subs	r2, r2, r6
 8000faa:	6122      	str	r2, [r4, #16]
 8000fac:	f8cd a000 	str.w	sl, [sp]
 8000fb0:	464b      	mov	r3, r9
 8000fb2:	aa03      	add	r2, sp, #12
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	4640      	mov	r0, r8
 8000fb8:	f7ff fee6 	bl	8000d88 <_printf_common>
 8000fbc:	3001      	adds	r0, #1
 8000fbe:	d14a      	bne.n	8001056 <_printf_i+0x1f2>
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fc4:	b004      	add	sp, #16
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	f043 0320 	orr.w	r3, r3, #32
 8000fd0:	6023      	str	r3, [r4, #0]
 8000fd2:	4833      	ldr	r0, [pc, #204]	@ (80010a0 <_printf_i+0x23c>)
 8000fd4:	2778      	movs	r7, #120	@ 0x78
 8000fd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000fda:	6823      	ldr	r3, [r4, #0]
 8000fdc:	6831      	ldr	r1, [r6, #0]
 8000fde:	061f      	lsls	r7, r3, #24
 8000fe0:	f851 5b04 	ldr.w	r5, [r1], #4
 8000fe4:	d402      	bmi.n	8000fec <_printf_i+0x188>
 8000fe6:	065f      	lsls	r7, r3, #25
 8000fe8:	bf48      	it	mi
 8000fea:	b2ad      	uxthmi	r5, r5
 8000fec:	6031      	str	r1, [r6, #0]
 8000fee:	07d9      	lsls	r1, r3, #31
 8000ff0:	bf44      	itt	mi
 8000ff2:	f043 0320 	orrmi.w	r3, r3, #32
 8000ff6:	6023      	strmi	r3, [r4, #0]
 8000ff8:	b11d      	cbz	r5, 8001002 <_printf_i+0x19e>
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	e7ac      	b.n	8000f58 <_printf_i+0xf4>
 8000ffe:	4827      	ldr	r0, [pc, #156]	@ (800109c <_printf_i+0x238>)
 8001000:	e7e9      	b.n	8000fd6 <_printf_i+0x172>
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	f023 0320 	bic.w	r3, r3, #32
 8001008:	6023      	str	r3, [r4, #0]
 800100a:	e7f6      	b.n	8000ffa <_printf_i+0x196>
 800100c:	4616      	mov	r6, r2
 800100e:	e7bd      	b.n	8000f8c <_printf_i+0x128>
 8001010:	6833      	ldr	r3, [r6, #0]
 8001012:	6825      	ldr	r5, [r4, #0]
 8001014:	6961      	ldr	r1, [r4, #20]
 8001016:	1d18      	adds	r0, r3, #4
 8001018:	6030      	str	r0, [r6, #0]
 800101a:	062e      	lsls	r6, r5, #24
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	d501      	bpl.n	8001024 <_printf_i+0x1c0>
 8001020:	6019      	str	r1, [r3, #0]
 8001022:	e002      	b.n	800102a <_printf_i+0x1c6>
 8001024:	0668      	lsls	r0, r5, #25
 8001026:	d5fb      	bpl.n	8001020 <_printf_i+0x1bc>
 8001028:	8019      	strh	r1, [r3, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	6123      	str	r3, [r4, #16]
 800102e:	4616      	mov	r6, r2
 8001030:	e7bc      	b.n	8000fac <_printf_i+0x148>
 8001032:	6833      	ldr	r3, [r6, #0]
 8001034:	1d1a      	adds	r2, r3, #4
 8001036:	6032      	str	r2, [r6, #0]
 8001038:	681e      	ldr	r6, [r3, #0]
 800103a:	6862      	ldr	r2, [r4, #4]
 800103c:	2100      	movs	r1, #0
 800103e:	4630      	mov	r0, r6
 8001040:	f7ff f8c6 	bl	80001d0 <memchr>
 8001044:	b108      	cbz	r0, 800104a <_printf_i+0x1e6>
 8001046:	1b80      	subs	r0, r0, r6
 8001048:	6060      	str	r0, [r4, #4]
 800104a:	6863      	ldr	r3, [r4, #4]
 800104c:	6123      	str	r3, [r4, #16]
 800104e:	2300      	movs	r3, #0
 8001050:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001054:	e7aa      	b.n	8000fac <_printf_i+0x148>
 8001056:	6923      	ldr	r3, [r4, #16]
 8001058:	4632      	mov	r2, r6
 800105a:	4649      	mov	r1, r9
 800105c:	4640      	mov	r0, r8
 800105e:	47d0      	blx	sl
 8001060:	3001      	adds	r0, #1
 8001062:	d0ad      	beq.n	8000fc0 <_printf_i+0x15c>
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	079b      	lsls	r3, r3, #30
 8001068:	d413      	bmi.n	8001092 <_printf_i+0x22e>
 800106a:	68e0      	ldr	r0, [r4, #12]
 800106c:	9b03      	ldr	r3, [sp, #12]
 800106e:	4298      	cmp	r0, r3
 8001070:	bfb8      	it	lt
 8001072:	4618      	movlt	r0, r3
 8001074:	e7a6      	b.n	8000fc4 <_printf_i+0x160>
 8001076:	2301      	movs	r3, #1
 8001078:	4632      	mov	r2, r6
 800107a:	4649      	mov	r1, r9
 800107c:	4640      	mov	r0, r8
 800107e:	47d0      	blx	sl
 8001080:	3001      	adds	r0, #1
 8001082:	d09d      	beq.n	8000fc0 <_printf_i+0x15c>
 8001084:	3501      	adds	r5, #1
 8001086:	68e3      	ldr	r3, [r4, #12]
 8001088:	9903      	ldr	r1, [sp, #12]
 800108a:	1a5b      	subs	r3, r3, r1
 800108c:	42ab      	cmp	r3, r5
 800108e:	dcf2      	bgt.n	8001076 <_printf_i+0x212>
 8001090:	e7eb      	b.n	800106a <_printf_i+0x206>
 8001092:	2500      	movs	r5, #0
 8001094:	f104 0619 	add.w	r6, r4, #25
 8001098:	e7f5      	b.n	8001086 <_printf_i+0x222>
 800109a:	bf00      	nop
 800109c:	08001268 	.word	0x08001268
 80010a0:	08001279 	.word	0x08001279

080010a4 <__malloc_lock>:
 80010a4:	4801      	ldr	r0, [pc, #4]	@ (80010ac <__malloc_lock+0x8>)
 80010a6:	f7ff bc73 	b.w	8000990 <__retarget_lock_acquire_recursive>
 80010aa:	bf00      	nop
 80010ac:	200001b0 	.word	0x200001b0

080010b0 <__malloc_unlock>:
 80010b0:	4801      	ldr	r0, [pc, #4]	@ (80010b8 <__malloc_unlock+0x8>)
 80010b2:	f7ff bc6e 	b.w	8000992 <__retarget_lock_release_recursive>
 80010b6:	bf00      	nop
 80010b8:	200001b0 	.word	0x200001b0

080010bc <_realloc_r>:
 80010bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c0:	4680      	mov	r8, r0
 80010c2:	4615      	mov	r5, r2
 80010c4:	460c      	mov	r4, r1
 80010c6:	b921      	cbnz	r1, 80010d2 <_realloc_r+0x16>
 80010c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010cc:	4611      	mov	r1, r2
 80010ce:	f7ff bddb 	b.w	8000c88 <_malloc_r>
 80010d2:	b92a      	cbnz	r2, 80010e0 <_realloc_r+0x24>
 80010d4:	f000 f858 	bl	8001188 <_free_r>
 80010d8:	2400      	movs	r4, #0
 80010da:	4620      	mov	r0, r4
 80010dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e0:	f000 f89c 	bl	800121c <_malloc_usable_size_r>
 80010e4:	4285      	cmp	r5, r0
 80010e6:	4606      	mov	r6, r0
 80010e8:	d802      	bhi.n	80010f0 <_realloc_r+0x34>
 80010ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80010ee:	d8f4      	bhi.n	80010da <_realloc_r+0x1e>
 80010f0:	4629      	mov	r1, r5
 80010f2:	4640      	mov	r0, r8
 80010f4:	f7ff fdc8 	bl	8000c88 <_malloc_r>
 80010f8:	4607      	mov	r7, r0
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d0ec      	beq.n	80010d8 <_realloc_r+0x1c>
 80010fe:	42b5      	cmp	r5, r6
 8001100:	462a      	mov	r2, r5
 8001102:	4621      	mov	r1, r4
 8001104:	bf28      	it	cs
 8001106:	4632      	movcs	r2, r6
 8001108:	f000 f830 	bl	800116c <memcpy>
 800110c:	4621      	mov	r1, r4
 800110e:	4640      	mov	r0, r8
 8001110:	f000 f83a 	bl	8001188 <_free_r>
 8001114:	463c      	mov	r4, r7
 8001116:	e7e0      	b.n	80010da <_realloc_r+0x1e>

08001118 <memmove>:
 8001118:	4288      	cmp	r0, r1
 800111a:	b510      	push	{r4, lr}
 800111c:	eb01 0402 	add.w	r4, r1, r2
 8001120:	d902      	bls.n	8001128 <memmove+0x10>
 8001122:	4284      	cmp	r4, r0
 8001124:	4623      	mov	r3, r4
 8001126:	d807      	bhi.n	8001138 <memmove+0x20>
 8001128:	1e43      	subs	r3, r0, #1
 800112a:	42a1      	cmp	r1, r4
 800112c:	d008      	beq.n	8001140 <memmove+0x28>
 800112e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001136:	e7f8      	b.n	800112a <memmove+0x12>
 8001138:	4402      	add	r2, r0
 800113a:	4601      	mov	r1, r0
 800113c:	428a      	cmp	r2, r1
 800113e:	d100      	bne.n	8001142 <memmove+0x2a>
 8001140:	bd10      	pop	{r4, pc}
 8001142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800114a:	e7f7      	b.n	800113c <memmove+0x24>

0800114c <_sbrk_r>:
 800114c:	b538      	push	{r3, r4, r5, lr}
 800114e:	4d06      	ldr	r5, [pc, #24]	@ (8001168 <_sbrk_r+0x1c>)
 8001150:	2300      	movs	r3, #0
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	602b      	str	r3, [r5, #0]
 8001158:	f7ff fb3a 	bl	80007d0 <_sbrk>
 800115c:	1c43      	adds	r3, r0, #1
 800115e:	d102      	bne.n	8001166 <_sbrk_r+0x1a>
 8001160:	682b      	ldr	r3, [r5, #0]
 8001162:	b103      	cbz	r3, 8001166 <_sbrk_r+0x1a>
 8001164:	6023      	str	r3, [r4, #0]
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	200001bc 	.word	0x200001bc

0800116c <memcpy>:
 800116c:	440a      	add	r2, r1
 800116e:	4291      	cmp	r1, r2
 8001170:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001174:	d100      	bne.n	8001178 <memcpy+0xc>
 8001176:	4770      	bx	lr
 8001178:	b510      	push	{r4, lr}
 800117a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800117e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001182:	4291      	cmp	r1, r2
 8001184:	d1f9      	bne.n	800117a <memcpy+0xe>
 8001186:	bd10      	pop	{r4, pc}

08001188 <_free_r>:
 8001188:	b538      	push	{r3, r4, r5, lr}
 800118a:	4605      	mov	r5, r0
 800118c:	2900      	cmp	r1, #0
 800118e:	d041      	beq.n	8001214 <_free_r+0x8c>
 8001190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001194:	1f0c      	subs	r4, r1, #4
 8001196:	2b00      	cmp	r3, #0
 8001198:	bfb8      	it	lt
 800119a:	18e4      	addlt	r4, r4, r3
 800119c:	f7ff ff82 	bl	80010a4 <__malloc_lock>
 80011a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001218 <_free_r+0x90>)
 80011a2:	6813      	ldr	r3, [r2, #0]
 80011a4:	b933      	cbnz	r3, 80011b4 <_free_r+0x2c>
 80011a6:	6063      	str	r3, [r4, #4]
 80011a8:	6014      	str	r4, [r2, #0]
 80011aa:	4628      	mov	r0, r5
 80011ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b0:	f7ff bf7e 	b.w	80010b0 <__malloc_unlock>
 80011b4:	42a3      	cmp	r3, r4
 80011b6:	d908      	bls.n	80011ca <_free_r+0x42>
 80011b8:	6820      	ldr	r0, [r4, #0]
 80011ba:	1821      	adds	r1, r4, r0
 80011bc:	428b      	cmp	r3, r1
 80011be:	bf01      	itttt	eq
 80011c0:	6819      	ldreq	r1, [r3, #0]
 80011c2:	685b      	ldreq	r3, [r3, #4]
 80011c4:	1809      	addeq	r1, r1, r0
 80011c6:	6021      	streq	r1, [r4, #0]
 80011c8:	e7ed      	b.n	80011a6 <_free_r+0x1e>
 80011ca:	461a      	mov	r2, r3
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	b10b      	cbz	r3, 80011d4 <_free_r+0x4c>
 80011d0:	42a3      	cmp	r3, r4
 80011d2:	d9fa      	bls.n	80011ca <_free_r+0x42>
 80011d4:	6811      	ldr	r1, [r2, #0]
 80011d6:	1850      	adds	r0, r2, r1
 80011d8:	42a0      	cmp	r0, r4
 80011da:	d10b      	bne.n	80011f4 <_free_r+0x6c>
 80011dc:	6820      	ldr	r0, [r4, #0]
 80011de:	4401      	add	r1, r0
 80011e0:	1850      	adds	r0, r2, r1
 80011e2:	4283      	cmp	r3, r0
 80011e4:	6011      	str	r1, [r2, #0]
 80011e6:	d1e0      	bne.n	80011aa <_free_r+0x22>
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	6053      	str	r3, [r2, #4]
 80011ee:	4408      	add	r0, r1
 80011f0:	6010      	str	r0, [r2, #0]
 80011f2:	e7da      	b.n	80011aa <_free_r+0x22>
 80011f4:	d902      	bls.n	80011fc <_free_r+0x74>
 80011f6:	230c      	movs	r3, #12
 80011f8:	602b      	str	r3, [r5, #0]
 80011fa:	e7d6      	b.n	80011aa <_free_r+0x22>
 80011fc:	6820      	ldr	r0, [r4, #0]
 80011fe:	1821      	adds	r1, r4, r0
 8001200:	428b      	cmp	r3, r1
 8001202:	bf04      	itt	eq
 8001204:	6819      	ldreq	r1, [r3, #0]
 8001206:	685b      	ldreq	r3, [r3, #4]
 8001208:	6063      	str	r3, [r4, #4]
 800120a:	bf04      	itt	eq
 800120c:	1809      	addeq	r1, r1, r0
 800120e:	6021      	streq	r1, [r4, #0]
 8001210:	6054      	str	r4, [r2, #4]
 8001212:	e7ca      	b.n	80011aa <_free_r+0x22>
 8001214:	bd38      	pop	{r3, r4, r5, pc}
 8001216:	bf00      	nop
 8001218:	200001b8 	.word	0x200001b8

0800121c <_malloc_usable_size_r>:
 800121c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001220:	1f18      	subs	r0, r3, #4
 8001222:	2b00      	cmp	r3, #0
 8001224:	bfbc      	itt	lt
 8001226:	580b      	ldrlt	r3, [r1, r0]
 8001228:	18c0      	addlt	r0, r0, r3
 800122a:	4770      	bx	lr

0800122c <_init>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	bf00      	nop
 8001230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001232:	bc08      	pop	{r3}
 8001234:	469e      	mov	lr, r3
 8001236:	4770      	bx	lr

08001238 <_fini>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr
