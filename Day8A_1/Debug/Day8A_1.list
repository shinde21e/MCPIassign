
Day8A_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08001664  08001664  00002664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017cc  080017cc  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080017cc  080017cc  000027cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017d4  080017d4  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017d4  080017d4  000027d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017d8  080017d8  000027d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080017dc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          00000168  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001bc  200001bc  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014ec  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000070a  00000000  00000000  0000456a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fb  00000000  00000000  00004df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001943d  00000000  00000000  00004eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002325  00000000  00000000  0001e328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bdc9  00000000  00000000  0002064d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ac416  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ac4  00000000  00000000  000ac45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000acf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000062  00000000  00000000  000acf3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800164c 	.word	0x0800164c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	0800164c 	.word	0x0800164c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000288:	4b0e      	ldr	r3, [pc, #56]	@ (80002c4 <DelayMs+0x44>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800028e:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <DelayMs+0x48>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a0e      	ldr	r2, [pc, #56]	@ (80002cc <DelayMs+0x4c>)
 8000294:	fba2 2303 	umull	r2, r3, r2, r3
 8000298:	099b      	lsrs	r3, r3, #6
 800029a:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	fb02 f303 	mul.w	r3, r2, r3
 80002a4:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002a6:	bf00      	nop
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <DelayMs+0x44>)
 80002aa:	685a      	ldr	r2, [r3, #4]
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	1ad2      	subs	r2, r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d3f8      	bcc.n	80002a8 <DelayMs+0x28>
}
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	e0001000 	.word	0xe0001000
 80002c8:	20000000 	.word	0x20000000
 80002cc:	10624dd3 	.word	0x10624dd3

080002d0 <I2CStart>:
 *      Author: cherikiansh
 */

#include "i2c.h"

void I2CStart() {
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <I2CStart+0x28>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a07      	ldr	r2, [pc, #28]	@ (80002f8 <I2CStart+0x28>)
 80002da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002de:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 80002e0:	bf00      	nop
 80002e2:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <I2CStart+0x28>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d0f9      	beq.n	80002e2 <I2CStart+0x12>
}
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	40005400 	.word	0x40005400

080002fc <I2CRepeatStart>:

void I2CRepeatStart() {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	I2CStart();
 8000300:	f7ff ffe6 	bl	80002d0 <I2CStart>
}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}

08000308 <I2CStop>:

void I2CStop() {
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 800030c:	4b08      	ldr	r3, [pc, #32]	@ (8000330 <I2CStop+0x28>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a07      	ldr	r2, [pc, #28]	@ (8000330 <I2CStop+0x28>)
 8000312:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000316:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000318:	bf00      	nop
 800031a:	4b05      	ldr	r3, [pc, #20]	@ (8000330 <I2CStop+0x28>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	f003 0302 	and.w	r3, r3, #2
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0f9      	beq.n	800031a <I2CStop+0x12>
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40005400 	.word	0x40005400

08000334 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800033e:	4a09      	ldr	r2, [pc, #36]	@ (8000364 <I2CSendSlaveAddress+0x30>)
 8000340:	79fb      	ldrb	r3, [r7, #7]
 8000342:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000344:	bf00      	nop
 8000346:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <I2CSendSlaveAddress+0x30>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	f003 0302 	and.w	r3, r3, #2
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 8000352:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <I2CSendSlaveAddress+0x30>)
 8000354:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 8000356:	4b03      	ldr	r3, [pc, #12]	@ (8000364 <I2CSendSlaveAddress+0x30>)
 8000358:	699b      	ldr	r3, [r3, #24]
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr
 8000364:	40005400 	.word	0x40005400

08000368 <I2CSendData>:

void I2CSendData(uint8_t val) {
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000372:	bf00      	nop
 8000374:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <I2CSendData+0x38>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 8000380:	4a07      	ldr	r2, [pc, #28]	@ (80003a0 <I2CSendData+0x38>)
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000386:	bf00      	nop
 8000388:	4b05      	ldr	r3, [pc, #20]	@ (80003a0 <I2CSendData+0x38>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	2b00      	cmp	r3, #0
 8000392:	d0f9      	beq.n	8000388 <I2CSendData+0x20>
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	40005400 	.word	0x40005400

080003a4 <I2CRecvDataAck>:

uint8_t I2CRecvDataAck(void) {
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 |= I2C_CR1_ACK | I2C_CR1_POS;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <I2CRecvDataAck+0x34>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <I2CRecvDataAck+0x34>)
 80003b0:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80003b4:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80003b6:	bf00      	nop
 80003b8:	4b07      	ldr	r3, [pc, #28]	@ (80003d8 <I2CRecvDataAck+0x34>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d0f9      	beq.n	80003b8 <I2CRecvDataAck+0x14>
	// read content and clear flags
	val = (uint8_t)I2C1->DR;
 80003c4:	4b04      	ldr	r3, [pc, #16]	@ (80003d8 <I2CRecvDataAck+0x34>)
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	71fb      	strb	r3, [r7, #7]
	return val;
 80003ca:	79fb      	ldrb	r3, [r7, #7]
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40005400 	.word	0x40005400

080003dc <I2CRecvDataNAck>:

uint8_t I2CRecvDataNAck(void) {
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
	uint8_t val;
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
 80003e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000410 <I2CRecvDataNAck+0x34>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <I2CRecvDataNAck+0x34>)
 80003e8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80003ec:	6013      	str	r3, [r2, #0]
	// wait until receive buffer is not empty
	while (!(I2C1->SR1 & I2C_SR1_RXNE));
 80003ee:	bf00      	nop
 80003f0:	4b07      	ldr	r3, [pc, #28]	@ (8000410 <I2CRecvDataNAck+0x34>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d0f9      	beq.n	80003f0 <I2CRecvDataNAck+0x14>
	// read content and clear flags
	val = I2C1->DR;
 80003fc:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <I2CRecvDataNAck+0x34>)
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	71fb      	strb	r3, [r7, #7]
	return val;
 8000402:	79fb      	ldrb	r3, [r7, #7]
}
 8000404:	4618      	mov	r0, r3
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	40005400 	.word	0x40005400

08000414 <I2CIsDeviceReady>:

int I2CIsDeviceReady(uint8_t slaveaddr) {
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	f023 0301 	bic.w	r3, r3, #1
 8000424:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 8000426:	4a09      	ldr	r2, [pc, #36]	@ (800044c <I2CIsDeviceReady+0x38>)
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 800042c:	bf00      	nop
 800042e:	4b07      	ldr	r3, [pc, #28]	@ (800044c <I2CIsDeviceReady+0x38>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	f003 0302 	and.w	r3, r3, #2
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 800043a:	4b04      	ldr	r3, [pc, #16]	@ (800044c <I2CIsDeviceReady+0x38>)
 800043c:	699b      	ldr	r3, [r3, #24]
	return 1;
 800043e:	2301      	movs	r3, #1
}
 8000440:	4618      	mov	r0, r3
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40005400 	.word	0x40005400

08000450 <I2CInit>:

void I2CInit() {
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000454:	4b43      	ldr	r3, [pc, #268]	@ (8000564 <I2CInit+0x114>)
 8000456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000458:	4a42      	ldr	r2, [pc, #264]	@ (8000564 <I2CInit+0x114>)
 800045a:	f043 0302 	orr.w	r3, r3, #2
 800045e:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000460:	2032      	movs	r0, #50	@ 0x32
 8000462:	f7ff ff0d 	bl	8000280 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000466:	4b3f      	ldr	r3, [pc, #252]	@ (8000564 <I2CInit+0x114>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046a:	4a3e      	ldr	r2, [pc, #248]	@ (8000564 <I2CInit+0x114>)
 800046c:	f043 0302 	orr.w	r3, r3, #2
 8000470:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 8000472:	4b3d      	ldr	r3, [pc, #244]	@ (8000568 <I2CInit+0x118>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a3c      	ldr	r2, [pc, #240]	@ (8000568 <I2CInit+0x118>)
 8000478:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800047c:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 800047e:	4b3a      	ldr	r3, [pc, #232]	@ (8000568 <I2CInit+0x118>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a39      	ldr	r2, [pc, #228]	@ (8000568 <I2CInit+0x118>)
 8000484:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000488:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 800048a:	4b37      	ldr	r3, [pc, #220]	@ (8000568 <I2CInit+0x118>)
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	4a36      	ldr	r2, [pc, #216]	@ (8000568 <I2CInit+0x118>)
 8000490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000494:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 8000496:	4b34      	ldr	r3, [pc, #208]	@ (8000568 <I2CInit+0x118>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	4a33      	ldr	r2, [pc, #204]	@ (8000568 <I2CInit+0x118>)
 800049c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80004a0:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 80004a2:	4b31      	ldr	r3, [pc, #196]	@ (8000568 <I2CInit+0x118>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a30      	ldr	r2, [pc, #192]	@ (8000568 <I2CInit+0x118>)
 80004a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004ac:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 80004ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000568 <I2CInit+0x118>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a2d      	ldr	r2, [pc, #180]	@ (8000568 <I2CInit+0x118>)
 80004b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80004b8:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 80004ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000568 <I2CInit+0x118>)
 80004bc:	685b      	ldr	r3, [r3, #4]
 80004be:	4a2a      	ldr	r2, [pc, #168]	@ (8000568 <I2CInit+0x118>)
 80004c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004c4:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 80004c6:	4b28      	ldr	r3, [pc, #160]	@ (8000568 <I2CInit+0x118>)
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	4a27      	ldr	r2, [pc, #156]	@ (8000568 <I2CInit+0x118>)
 80004cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004d0:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 80004d2:	4b25      	ldr	r3, [pc, #148]	@ (8000568 <I2CInit+0x118>)
 80004d4:	6a1b      	ldr	r3, [r3, #32]
 80004d6:	4a24      	ldr	r2, [pc, #144]	@ (8000568 <I2CInit+0x118>)
 80004d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80004dc:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 80004de:	4b22      	ldr	r3, [pc, #136]	@ (8000568 <I2CInit+0x118>)
 80004e0:	6a1b      	ldr	r3, [r3, #32]
 80004e2:	4a21      	ldr	r2, [pc, #132]	@ (8000568 <I2CInit+0x118>)
 80004e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80004e8:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80004ea:	4b1e      	ldr	r3, [pc, #120]	@ (8000564 <I2CInit+0x114>)
 80004ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004ee:	4a1d      	ldr	r2, [pc, #116]	@ (8000564 <I2CInit+0x114>)
 80004f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004f4:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 80004f6:	2032      	movs	r0, #50	@ 0x32
 80004f8:	f7ff fec2 	bl	8000280 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 80004fc:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <I2CInit+0x11c>)
 80004fe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000502:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000504:	4b19      	ldr	r3, [pc, #100]	@ (800056c <I2CInit+0x11c>)
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 800050a:	4b18      	ldr	r3, [pc, #96]	@ (800056c <I2CInit+0x11c>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	4a17      	ldr	r2, [pc, #92]	@ (800056c <I2CInit+0x11c>)
 8000510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000514:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <I2CInit+0x11c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a14      	ldr	r2, [pc, #80]	@ (800056c <I2CInit+0x11c>)
 800051c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000520:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 8000522:	4b12      	ldr	r3, [pc, #72]	@ (800056c <I2CInit+0x11c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a11      	ldr	r2, [pc, #68]	@ (800056c <I2CInit+0x11c>)
 8000528:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800052c:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <I2CInit+0x11c>)
 8000530:	685b      	ldr	r3, [r3, #4]
 8000532:	4a0e      	ldr	r2, [pc, #56]	@ (800056c <I2CInit+0x11c>)
 8000534:	f043 0310 	orr.w	r3, r3, #16
 8000538:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <I2CInit+0x11c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a0b      	ldr	r2, [pc, #44]	@ (800056c <I2CInit+0x11c>)
 8000540:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000544:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <I2CInit+0x11c>)
 8000548:	6a1b      	ldr	r3, [r3, #32]
 800054a:	4a08      	ldr	r2, [pc, #32]	@ (800056c <I2CInit+0x11c>)
 800054c:	f043 0311 	orr.w	r3, r3, #17
 8000550:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8000552:	4b06      	ldr	r3, [pc, #24]	@ (800056c <I2CInit+0x11c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a05      	ldr	r2, [pc, #20]	@ (800056c <I2CInit+0x11c>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6013      	str	r3, [r2, #0]
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800
 8000568:	40020400 	.word	0x40020400
 800056c:	40005400 	.word	0x40005400

08000570 <EEPROM_Init>:
 */


#include "eeprom.h"

void EEPROM_Init(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	int ret;
	I2CInit();
 8000576:	f7ff ff6b 	bl	8000450 <I2CInit>
	// optional -- check if eeprom is present
	I2CStart();
 800057a:	f7ff fea9 	bl	80002d0 <I2CStart>
	ret = I2CIsDeviceReady(EEPROM_W);
 800057e:	20a0      	movs	r0, #160	@ 0xa0
 8000580:	f7ff ff48 	bl	8000414 <I2CIsDeviceReady>
 8000584:	6078      	str	r0, [r7, #4]
	// if ret=0, eeprom not avail; otherwise, eeprom is avail.
	I2CStop();
 8000586:	f7ff febf 	bl	8000308 <I2CStop>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <EEPROM_Write>:

void EEPROM_Write(uint16_t addr, uint8_t byte[], uint8_t n) {
 8000592:	b580      	push	{r7, lr}
 8000594:	b084      	sub	sp, #16
 8000596:	af00      	add	r7, sp, #0
 8000598:	4603      	mov	r3, r0
 800059a:	6039      	str	r1, [r7, #0]
 800059c:	80fb      	strh	r3, [r7, #6]
 800059e:	4613      	mov	r3, r2
 80005a0:	717b      	strb	r3, [r7, #5]
	uint8_t high = addr >> 8, low = addr & 0xFF;
 80005a2:	88fb      	ldrh	r3, [r7, #6]
 80005a4:	0a1b      	lsrs	r3, r3, #8
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	72fb      	strb	r3, [r7, #11]
 80005aa:	88fb      	ldrh	r3, [r7, #6]
 80005ac:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 80005ae:	f7ff fe8f 	bl	80002d0 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 80005b2:	20a0      	movs	r0, #160	@ 0xa0
 80005b4:	f7ff febe 	bl	8000334 <I2CSendSlaveAddress>
	I2CSendData(high);
 80005b8:	7afb      	ldrb	r3, [r7, #11]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fed4 	bl	8000368 <I2CSendData>
	I2CSendData(low);
 80005c0:	7abb      	ldrb	r3, [r7, #10]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fed0 	bl	8000368 <I2CSendData>
	for(int i=0; i<n; i++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e009      	b.n	80005e2 <EEPROM_Write+0x50>
		I2CSendData(byte[i]);
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	683a      	ldr	r2, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fec6 	bl	8000368 <I2CSendData>
	for(int i=0; i<n; i++)
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	797b      	ldrb	r3, [r7, #5]
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	dbf1      	blt.n	80005ce <EEPROM_Write+0x3c>
	I2CStop();
 80005ea:	f7ff fe8d 	bl	8000308 <I2CStop>
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <EEPROM_Read>:

void EEPROM_Read(uint16_t addr, uint8_t byte[], uint8_t n) {
 80005f6:	b590      	push	{r4, r7, lr}
 80005f8:	b085      	sub	sp, #20
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	4603      	mov	r3, r0
 80005fe:	6039      	str	r1, [r7, #0]
 8000600:	80fb      	strh	r3, [r7, #6]
 8000602:	4613      	mov	r3, r2
 8000604:	717b      	strb	r3, [r7, #5]
	int i;
	uint8_t high = addr >> 8, low = addr & 0xFF;
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	b29b      	uxth	r3, r3
 800060c:	72fb      	strb	r3, [r7, #11]
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	72bb      	strb	r3, [r7, #10]
	I2CStart();
 8000612:	f7ff fe5d 	bl	80002d0 <I2CStart>
	I2CSendSlaveAddress(EEPROM_W);
 8000616:	20a0      	movs	r0, #160	@ 0xa0
 8000618:	f7ff fe8c 	bl	8000334 <I2CSendSlaveAddress>
	I2CSendData(high);
 800061c:	7afb      	ldrb	r3, [r7, #11]
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fea2 	bl	8000368 <I2CSendData>
	I2CSendData(low);
 8000624:	7abb      	ldrb	r3, [r7, #10]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fe9e 	bl	8000368 <I2CSendData>
	I2CRepeatStart();
 800062c:	f7ff fe66 	bl	80002fc <I2CRepeatStart>
	I2CSendSlaveAddress(EEPROM_R);
 8000630:	20a1      	movs	r0, #161	@ 0xa1
 8000632:	f7ff fe7f 	bl	8000334 <I2CSendSlaveAddress>
	for(i=0; i<n-1; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	e009      	b.n	8000650 <EEPROM_Read+0x5a>
		byte[i] = I2CRecvDataAck();
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	18d4      	adds	r4, r2, r3
 8000642:	f7ff feaf 	bl	80003a4 <I2CRecvDataAck>
 8000646:	4603      	mov	r3, r0
 8000648:	7023      	strb	r3, [r4, #0]
	for(i=0; i<n-1; i++)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	3301      	adds	r3, #1
 800064e:	60fb      	str	r3, [r7, #12]
 8000650:	797b      	ldrb	r3, [r7, #5]
 8000652:	3b01      	subs	r3, #1
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	429a      	cmp	r2, r3
 8000658:	dbf0      	blt.n	800063c <EEPROM_Read+0x46>
	byte[i] = I2CRecvDataNAck();
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	683a      	ldr	r2, [r7, #0]
 800065e:	18d4      	adds	r4, r2, r3
 8000660:	f7ff febc 	bl	80003dc <I2CRecvDataNAck>
 8000664:	4603      	mov	r3, r0
 8000666:	7023      	strb	r3, [r4, #0]
	I2CStop();
 8000668:	f7ff fe4e 	bl	8000308 <I2CStop>
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bd90      	pop	{r4, r7, pc}

08000674 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
	char str[32] = "";
 800067a:	2300      	movs	r3, #0
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]
 800068e:	615a      	str	r2, [r3, #20]
 8000690:	619a      	str	r2, [r3, #24]
	char ch;
	SystemInit();
 8000692:	f000 f881 	bl	8000798 <SystemInit>
	EEPROM_Init();
 8000696:	f7ff ff6b 	bl	8000570 <EEPROM_Init>
	uartinit(9600);
 800069a:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800069e:	f000 f8b1 	bl	8000804 <uartinit>
	do
			{
	uartputs("Enter the choice\r\n");
 80006a2:	481e      	ldr	r0, [pc, #120]	@ (800071c <main+0xa8>)
 80006a4:	f000 f948 	bl	8000938 <uartputs>
	uartputs("1.EEPROM write\r\n");
 80006a8:	481d      	ldr	r0, [pc, #116]	@ (8000720 <main+0xac>)
 80006aa:	f000 f945 	bl	8000938 <uartputs>
	uartputs("2.EEPROM READ\r\n");
 80006ae:	481d      	ldr	r0, [pc, #116]	@ (8000724 <main+0xb0>)
 80006b0:	f000 f942 	bl	8000938 <uartputs>
	//ch=uartgetch();
	uartgets(str);
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f959 	bl	8000970 <uartgets>
	sscanf(str,"%d",&ch);
 80006be:	1dfa      	adds	r2, r7, #7
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	4918      	ldr	r1, [pc, #96]	@ (8000728 <main+0xb4>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f9a2 	bl	8000a10 <siscanf>

	switch(ch)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d002      	beq.n	80006d8 <main+0x64>
 80006d2:	2b02      	cmp	r3, #2
 80006d4:	d00d      	beq.n	80006f2 <main+0x7e>
 80006d6:	e019      	b.n	800070c <main+0x98>
	{
	case 1:uartgets(str);
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f947 	bl	8000970 <uartgets>
		EEPROM_Write(0x0020, (uint8_t*)str, 16);
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2210      	movs	r2, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	2020      	movs	r0, #32
 80006ec:	f7ff ff51 	bl	8000592 <EEPROM_Write>
		break;
 80006f0:	e00c      	b.n	800070c <main+0x98>
	case 2:
		EEPROM_Read(0x0020, (uint8_t*)str, 16);
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	2210      	movs	r2, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	2020      	movs	r0, #32
 80006fc:	f7ff ff7b 	bl	80005f6 <EEPROM_Read>
		uartputs(str);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f917 	bl	8000938 <uartputs>
		break;
 800070a:	bf00      	nop
	}
	}while(ch!=0);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1c7      	bne.n	80006a2 <main+0x2e>
	return 0;
 8000712:	2300      	movs	r3, #0
	}
 8000714:	4618      	mov	r0, r3
 8000716:	3728      	adds	r7, #40	@ 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	08001664 	.word	0x08001664
 8000720:	08001678 	.word	0x08001678
 8000724:	0800168c 	.word	0x0800168c
 8000728:	0800169c 	.word	0x0800169c

0800072c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000734:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <_sbrk+0x5c>)
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <_sbrk+0x60>)
 8000738:	1ad3      	subs	r3, r2, r3
 800073a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <_sbrk+0x64>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d102      	bne.n	800074e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <_sbrk+0x64>)
 800074a:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <_sbrk+0x68>)
 800074c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <_sbrk+0x64>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	693a      	ldr	r2, [r7, #16]
 8000758:	429a      	cmp	r2, r3
 800075a:	d207      	bcs.n	800076c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800075c:	f000 f984 	bl	8000a68 <__errno>
 8000760:	4603      	mov	r3, r0
 8000762:	220c      	movs	r2, #12
 8000764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000766:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800076a:	e009      	b.n	8000780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <_sbrk+0x64>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000772:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <_sbrk+0x64>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	4a05      	ldr	r2, [pc, #20]	@ (8000790 <_sbrk+0x64>)
 800077c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800077e:	68fb      	ldr	r3, [r7, #12]
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20020000 	.word	0x20020000
 800078c:	00000400 	.word	0x00000400
 8000790:	20000070 	.word	0x20000070
 8000794:	200001c0 	.word	0x200001c0

08000798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  DWT_Init();
 800079c:	f000 f802 	bl	80007a4 <DWT_Init>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80007a8:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <DWT_Init+0x58>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	4a13      	ldr	r2, [pc, #76]	@ (80007fc <DWT_Init+0x58>)
 80007ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80007b2:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80007b4:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <DWT_Init+0x58>)
 80007b6:	68db      	ldr	r3, [r3, #12]
 80007b8:	4a10      	ldr	r2, [pc, #64]	@ (80007fc <DWT_Init+0x58>)
 80007ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80007be:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <DWT_Init+0x5c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0e      	ldr	r2, [pc, #56]	@ (8000800 <DWT_Init+0x5c>)
 80007c6:	f023 0301 	bic.w	r3, r3, #1
 80007ca:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <DWT_Init+0x5c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	@ (8000800 <DWT_Init+0x5c>)
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80007d8:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <DWT_Init+0x5c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80007de:	bf00      	nop
    __ASM volatile ("NOP");
 80007e0:	bf00      	nop
    __ASM volatile ("NOP");
 80007e2:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <DWT_Init+0x5c>)
 80007e6:	685b      	ldr	r3, [r3, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bf0c      	ite	eq
 80007ec:	2301      	moveq	r3, #1
 80007ee:	2300      	movne	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000edf0 	.word	0xe000edf0
 8000800:	e0001000 	.word	0xe0001000

08000804 <uartinit>:
#define USART_ALT_FN 7
#define GPIO GPIOA

void uartinit(uint32_t baud)

{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= BV(RCC_AHB1ENR_GPIOAEN_Pos);
 800080c:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <uartinit+0xd0>)
 800080e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000810:	4a30      	ldr	r2, [pc, #192]	@ (80008d4 <uartinit+0xd0>)
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIO->AFR[0] |=((USART_ALT_FN << GPIO_AFRL_AFSEL3_Pos)|(USART_ALT_FN << GPIO_AFRL_AFSEL2_Pos));
 8000818:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <uartinit+0xd4>)
 800081a:	6a1b      	ldr	r3, [r3, #32]
 800081c:	4a2e      	ldr	r2, [pc, #184]	@ (80008d8 <uartinit+0xd4>)
 800081e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000822:	6213      	str	r3, [r2, #32]
	GPIO->MODER |=(BV(TX_PIN * 2+1) | BV(RX_PIN *2+1));
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <uartinit+0xd4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a2b      	ldr	r2, [pc, #172]	@ (80008d8 <uartinit+0xd4>)
 800082a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800082e:	6013      	str	r3, [r2, #0]
	GPIO->MODER &= ~(BV(TX_PIN * 2) | BV(RX_PIN * 2));
 8000830:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <uartinit+0xd4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a28      	ldr	r2, [pc, #160]	@ (80008d8 <uartinit+0xd4>)
 8000836:	f023 0350 	bic.w	r3, r3, #80	@ 0x50
 800083a:	6013      	str	r3, [r2, #0]
	GPIO->OSPEEDR &= ~(BV(TX_PIN*2) | BV(TX_PIN*2+1) | BV(RX_PIN *2)| BV(RX_PIN*2+1));
 800083c:	4b26      	ldr	r3, [pc, #152]	@ (80008d8 <uartinit+0xd4>)
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	4a25      	ldr	r2, [pc, #148]	@ (80008d8 <uartinit+0xd4>)
 8000842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000846:	6093      	str	r3, [r2, #8]
	GPIO->PUPDR &= ~(BV(TX_PIN*2) | BV(TX_PIN*2+1) | BV(RX_PIN *2)| BV(RX_PIN*2+1));
 8000848:	4b23      	ldr	r3, [pc, #140]	@ (80008d8 <uartinit+0xd4>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	4a22      	ldr	r2, [pc, #136]	@ (80008d8 <uartinit+0xd4>)
 800084e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000852:	60d3      	str	r3, [r2, #12]
	GPIO->OTYPER &= ~(BV(TX_PIN*2) | BV(TX_PIN*2+1) | BV(RX_PIN *2)| BV(RX_PIN*2+1));
 8000854:	4b20      	ldr	r3, [pc, #128]	@ (80008d8 <uartinit+0xd4>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4a1f      	ldr	r2, [pc, #124]	@ (80008d8 <uartinit+0xd4>)
 800085a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800085e:	6053      	str	r3, [r2, #4]

   RCC->APB1ENR |= BV(RCC_APB1ENR_USART2EN_Pos);
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <uartinit+0xd0>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	4a1b      	ldr	r2, [pc, #108]	@ (80008d4 <uartinit+0xd0>)
 8000866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800086a:	6413      	str	r3, [r2, #64]	@ 0x40
   USART2->CR1 = BV(USART_CR1_TE_Pos) | BV(USART_CR1_RE_Pos);
 800086c:	4b1b      	ldr	r3, [pc, #108]	@ (80008dc <uartinit+0xd8>)
 800086e:	220c      	movs	r2, #12
 8000870:	60da      	str	r2, [r3, #12]
   USART2->CR2= 0X00000000;
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <uartinit+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
   USART2->CR3=0X00000000;
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <uartinit+0xd8>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
   switch(baud){
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8000884:	d016      	beq.n	80008b4 <uartinit+0xb0>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800088c:	d816      	bhi.n	80008bc <uartinit+0xb8>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f5b3 5f16 	cmp.w	r3, #9600	@ 0x2580
 8000894:	d004      	beq.n	80008a0 <uartinit+0x9c>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 800089c:	d005      	beq.n	80008aa <uartinit+0xa6>
 800089e:	e00d      	b.n	80008bc <uartinit+0xb8>
				   case baud_9600:
					     	   USART2->BRR= baud_brr_9600;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <uartinit+0xd8>)
 80008a2:	f240 6283 	movw	r2, #1667	@ 0x683
 80008a6:	609a      	str	r2, [r3, #8]
					   	   break;
 80008a8:	e008      	b.n	80008bc <uartinit+0xb8>
				   case baud_38400:
					   	   	   USART2->BRR= baud_brr_38400;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <uartinit+0xd8>)
 80008ac:	f240 12a1 	movw	r2, #417	@ 0x1a1
 80008b0:	609a      	str	r2, [r3, #8]
					   	   	   break;
 80008b2:	e003      	b.n	80008bc <uartinit+0xb8>
				   case baud_115200:
					   	   	   USART2->BRR= baud_brr_115200;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <uartinit+0xd8>)
 80008b6:	228b      	movs	r2, #139	@ 0x8b
 80008b8:	609a      	str	r2, [r3, #8]
					   	   	   break;
 80008ba:	bf00      	nop
   }

   USART2->CR1 |= BV(USART_CR1_UE_Pos);
 80008bc:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <uartinit+0xd8>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	4a06      	ldr	r2, [pc, #24]	@ (80008dc <uartinit+0xd8>)
 80008c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80008c6:	60d3      	str	r3, [r2, #12]
}
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40004400 	.word	0x40004400

080008e0 <uartputch>:


void uartputch(uint8_t ch)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	while((USART2->SR & BV(USART_SR_TXE_Pos))==0)
 80008ea:	bf00      	nop
 80008ec:	4b06      	ldr	r3, [pc, #24]	@ (8000908 <uartputch+0x28>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0f9      	beq.n	80008ec <uartputch+0xc>
		;
	USART2->DR= ch;
 80008f8:	4a03      	ldr	r2, [pc, #12]	@ (8000908 <uartputch+0x28>)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	6053      	str	r3, [r2, #4]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40004400 	.word	0x40004400

0800090c <uartgetch>:
uint8_t uartgetch(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
	while((USART2->SR & BV(USART_SR_RXNE_Pos))==0)
 8000912:	bf00      	nop
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <uartgetch+0x28>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f003 0320 	and.w	r3, r3, #32
 800091c:	2b00      	cmp	r3, #0
 800091e:	d0f9      	beq.n	8000914 <uartgetch+0x8>
			;
	char ch= USART2->DR;
 8000920:	4b04      	ldr	r3, [pc, #16]	@ (8000934 <uartgetch+0x28>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	71fb      	strb	r3, [r7, #7]
	return ch;
 8000926:	79fb      	ldrb	r3, [r7, #7]
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40004400 	.word	0x40004400

08000938 <uartputs>:
void uartputs(char str[])
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	int i;
	for(i=0;str[i]!='\0';i++)
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	e009      	b.n	800095a <uartputs+0x22>
		uartputch(str[i]);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff ffc6 	bl	80008e0 <uartputch>
	for(i=0;str[i]!='\0';i++)
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3301      	adds	r3, #1
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1ef      	bne.n	8000946 <uartputs+0xe>

}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <uartgets>:
void uartgets(char str[])
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	int i=0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
	char ch;
	do
	{
		ch = uartgetch();
 800097c:	f7ff ffc6 	bl	800090c <uartgetch>
 8000980:	4603      	mov	r3, r0
 8000982:	72fb      	strb	r3, [r7, #11]
		str[i]=ch;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	7afa      	ldrb	r2, [r7, #11]
 800098c:	701a      	strb	r2, [r3, #0]
		i++;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3301      	adds	r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
	}while(ch != '\r');
 8000994:	7afb      	ldrb	r3, [r7, #11]
 8000996:	2b0d      	cmp	r3, #13
 8000998:	d1f0      	bne.n	800097c <uartgets+0xc>
	str[i]='\n';
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	687a      	ldr	r2, [r7, #4]
 800099e:	4413      	add	r3, r2
 80009a0:	220a      	movs	r2, #10
 80009a2:	701a      	strb	r2, [r3, #0]
	i++;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
	str[i]='\0';
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	4413      	add	r3, r2
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
}
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009bc:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c0:	f7ff feea 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c6:	490d      	ldr	r1, [pc, #52]	@ (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009cc:	e002      	b.n	80009d4 <LoopCopyDataInit>

080009ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d2:	3304      	adds	r3, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d8:	d3f9      	bcc.n	80009ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009da:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e0:	e001      	b.n	80009e6 <LoopFillZerobss>

080009e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e4:	3204      	adds	r2, #4

080009e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e8:	d3fb      	bcc.n	80009e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ea:	f000 f843 	bl	8000a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ee:	f7ff fe41 	bl	8000674 <main>

080009f2 <LoopForever>:

LoopForever:
  b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   r0, =_estack
 80009f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000a00:	080017dc 	.word	0x080017dc
  ldr r2, =_sbss
 8000a04:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000a08:	200001bc 	.word	0x200001bc

08000a0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <siscanf>:
 8000a10:	b40e      	push	{r1, r2, r3}
 8000a12:	b530      	push	{r4, r5, lr}
 8000a14:	b09c      	sub	sp, #112	@ 0x70
 8000a16:	ac1f      	add	r4, sp, #124	@ 0x7c
 8000a18:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8000a1c:	f854 5b04 	ldr.w	r5, [r4], #4
 8000a20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000a24:	9002      	str	r0, [sp, #8]
 8000a26:	9006      	str	r0, [sp, #24]
 8000a28:	f7ff fbd2 	bl	80001d0 <strlen>
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <siscanf+0x4c>)
 8000a2e:	9003      	str	r0, [sp, #12]
 8000a30:	9007      	str	r0, [sp, #28]
 8000a32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a34:	480a      	ldr	r0, [pc, #40]	@ (8000a60 <siscanf+0x50>)
 8000a36:	9401      	str	r4, [sp, #4]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000a3c:	9314      	str	r3, [sp, #80]	@ 0x50
 8000a3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000a46:	462a      	mov	r2, r5
 8000a48:	4623      	mov	r3, r4
 8000a4a:	a902      	add	r1, sp, #8
 8000a4c:	6800      	ldr	r0, [r0, #0]
 8000a4e:	f000 f8d9 	bl	8000c04 <__ssvfiscanf_r>
 8000a52:	b01c      	add	sp, #112	@ 0x70
 8000a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a58:	b003      	add	sp, #12
 8000a5a:	4770      	bx	lr
 8000a5c:	08000a65 	.word	0x08000a65
 8000a60:	20000004 	.word	0x20000004

08000a64 <__seofread>:
 8000a64:	2000      	movs	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__errno>:
 8000a68:	4b01      	ldr	r3, [pc, #4]	@ (8000a70 <__errno+0x8>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000004 	.word	0x20000004

08000a74 <__libc_init_array>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	4d0d      	ldr	r5, [pc, #52]	@ (8000aac <__libc_init_array+0x38>)
 8000a78:	4c0d      	ldr	r4, [pc, #52]	@ (8000ab0 <__libc_init_array+0x3c>)
 8000a7a:	1b64      	subs	r4, r4, r5
 8000a7c:	10a4      	asrs	r4, r4, #2
 8000a7e:	2600      	movs	r6, #0
 8000a80:	42a6      	cmp	r6, r4
 8000a82:	d109      	bne.n	8000a98 <__libc_init_array+0x24>
 8000a84:	4d0b      	ldr	r5, [pc, #44]	@ (8000ab4 <__libc_init_array+0x40>)
 8000a86:	4c0c      	ldr	r4, [pc, #48]	@ (8000ab8 <__libc_init_array+0x44>)
 8000a88:	f000 fde0 	bl	800164c <_init>
 8000a8c:	1b64      	subs	r4, r4, r5
 8000a8e:	10a4      	asrs	r4, r4, #2
 8000a90:	2600      	movs	r6, #0
 8000a92:	42a6      	cmp	r6, r4
 8000a94:	d105      	bne.n	8000aa2 <__libc_init_array+0x2e>
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9c:	4798      	blx	r3
 8000a9e:	3601      	adds	r6, #1
 8000aa0:	e7ee      	b.n	8000a80 <__libc_init_array+0xc>
 8000aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa6:	4798      	blx	r3
 8000aa8:	3601      	adds	r6, #1
 8000aaa:	e7f2      	b.n	8000a92 <__libc_init_array+0x1e>
 8000aac:	080017d4 	.word	0x080017d4
 8000ab0:	080017d4 	.word	0x080017d4
 8000ab4:	080017d4 	.word	0x080017d4
 8000ab8:	080017d8 	.word	0x080017d8

08000abc <__retarget_lock_acquire_recursive>:
 8000abc:	4770      	bx	lr

08000abe <__retarget_lock_release_recursive>:
 8000abe:	4770      	bx	lr

08000ac0 <_free_r>:
 8000ac0:	b538      	push	{r3, r4, r5, lr}
 8000ac2:	4605      	mov	r5, r0
 8000ac4:	2900      	cmp	r1, #0
 8000ac6:	d041      	beq.n	8000b4c <_free_r+0x8c>
 8000ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000acc:	1f0c      	subs	r4, r1, #4
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bfb8      	it	lt
 8000ad2:	18e4      	addlt	r4, r4, r3
 8000ad4:	f000 fc34 	bl	8001340 <__malloc_lock>
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <_free_r+0x90>)
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	b933      	cbnz	r3, 8000aec <_free_r+0x2c>
 8000ade:	6063      	str	r3, [r4, #4]
 8000ae0:	6014      	str	r4, [r2, #0]
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ae8:	f000 bc30 	b.w	800134c <__malloc_unlock>
 8000aec:	42a3      	cmp	r3, r4
 8000aee:	d908      	bls.n	8000b02 <_free_r+0x42>
 8000af0:	6820      	ldr	r0, [r4, #0]
 8000af2:	1821      	adds	r1, r4, r0
 8000af4:	428b      	cmp	r3, r1
 8000af6:	bf01      	itttt	eq
 8000af8:	6819      	ldreq	r1, [r3, #0]
 8000afa:	685b      	ldreq	r3, [r3, #4]
 8000afc:	1809      	addeq	r1, r1, r0
 8000afe:	6021      	streq	r1, [r4, #0]
 8000b00:	e7ed      	b.n	8000ade <_free_r+0x1e>
 8000b02:	461a      	mov	r2, r3
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	b10b      	cbz	r3, 8000b0c <_free_r+0x4c>
 8000b08:	42a3      	cmp	r3, r4
 8000b0a:	d9fa      	bls.n	8000b02 <_free_r+0x42>
 8000b0c:	6811      	ldr	r1, [r2, #0]
 8000b0e:	1850      	adds	r0, r2, r1
 8000b10:	42a0      	cmp	r0, r4
 8000b12:	d10b      	bne.n	8000b2c <_free_r+0x6c>
 8000b14:	6820      	ldr	r0, [r4, #0]
 8000b16:	4401      	add	r1, r0
 8000b18:	1850      	adds	r0, r2, r1
 8000b1a:	4283      	cmp	r3, r0
 8000b1c:	6011      	str	r1, [r2, #0]
 8000b1e:	d1e0      	bne.n	8000ae2 <_free_r+0x22>
 8000b20:	6818      	ldr	r0, [r3, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	6053      	str	r3, [r2, #4]
 8000b26:	4408      	add	r0, r1
 8000b28:	6010      	str	r0, [r2, #0]
 8000b2a:	e7da      	b.n	8000ae2 <_free_r+0x22>
 8000b2c:	d902      	bls.n	8000b34 <_free_r+0x74>
 8000b2e:	230c      	movs	r3, #12
 8000b30:	602b      	str	r3, [r5, #0]
 8000b32:	e7d6      	b.n	8000ae2 <_free_r+0x22>
 8000b34:	6820      	ldr	r0, [r4, #0]
 8000b36:	1821      	adds	r1, r4, r0
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	bf04      	itt	eq
 8000b3c:	6819      	ldreq	r1, [r3, #0]
 8000b3e:	685b      	ldreq	r3, [r3, #4]
 8000b40:	6063      	str	r3, [r4, #4]
 8000b42:	bf04      	itt	eq
 8000b44:	1809      	addeq	r1, r1, r0
 8000b46:	6021      	streq	r1, [r4, #0]
 8000b48:	6054      	str	r4, [r2, #4]
 8000b4a:	e7ca      	b.n	8000ae2 <_free_r+0x22>
 8000b4c:	bd38      	pop	{r3, r4, r5, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001b8 	.word	0x200001b8

08000b54 <_sungetc_r>:
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	1c4b      	adds	r3, r1, #1
 8000b58:	4614      	mov	r4, r2
 8000b5a:	d103      	bne.n	8000b64 <_sungetc_r+0x10>
 8000b5c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000b60:	4628      	mov	r0, r5
 8000b62:	bd38      	pop	{r3, r4, r5, pc}
 8000b64:	8993      	ldrh	r3, [r2, #12]
 8000b66:	f023 0320 	bic.w	r3, r3, #32
 8000b6a:	8193      	strh	r3, [r2, #12]
 8000b6c:	6853      	ldr	r3, [r2, #4]
 8000b6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000b70:	b2cd      	uxtb	r5, r1
 8000b72:	b18a      	cbz	r2, 8000b98 <_sungetc_r+0x44>
 8000b74:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000b76:	429a      	cmp	r2, r3
 8000b78:	dd08      	ble.n	8000b8c <_sungetc_r+0x38>
 8000b7a:	6823      	ldr	r3, [r4, #0]
 8000b7c:	1e5a      	subs	r2, r3, #1
 8000b7e:	6022      	str	r2, [r4, #0]
 8000b80:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000b84:	6863      	ldr	r3, [r4, #4]
 8000b86:	3301      	adds	r3, #1
 8000b88:	6063      	str	r3, [r4, #4]
 8000b8a:	e7e9      	b.n	8000b60 <_sungetc_r+0xc>
 8000b8c:	4621      	mov	r1, r4
 8000b8e:	f000 fbe3 	bl	8001358 <__submore>
 8000b92:	2800      	cmp	r0, #0
 8000b94:	d0f1      	beq.n	8000b7a <_sungetc_r+0x26>
 8000b96:	e7e1      	b.n	8000b5c <_sungetc_r+0x8>
 8000b98:	6921      	ldr	r1, [r4, #16]
 8000b9a:	6822      	ldr	r2, [r4, #0]
 8000b9c:	b141      	cbz	r1, 8000bb0 <_sungetc_r+0x5c>
 8000b9e:	4291      	cmp	r1, r2
 8000ba0:	d206      	bcs.n	8000bb0 <_sungetc_r+0x5c>
 8000ba2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8000ba6:	42a9      	cmp	r1, r5
 8000ba8:	d102      	bne.n	8000bb0 <_sungetc_r+0x5c>
 8000baa:	3a01      	subs	r2, #1
 8000bac:	6022      	str	r2, [r4, #0]
 8000bae:	e7ea      	b.n	8000b86 <_sungetc_r+0x32>
 8000bb0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8000bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bba:	2303      	movs	r3, #3
 8000bbc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000bbe:	4623      	mov	r3, r4
 8000bc0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000bc4:	6023      	str	r3, [r4, #0]
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e7de      	b.n	8000b88 <_sungetc_r+0x34>

08000bca <__ssrefill_r>:
 8000bca:	b510      	push	{r4, lr}
 8000bcc:	460c      	mov	r4, r1
 8000bce:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000bd0:	b169      	cbz	r1, 8000bee <__ssrefill_r+0x24>
 8000bd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	d001      	beq.n	8000bde <__ssrefill_r+0x14>
 8000bda:	f7ff ff71 	bl	8000ac0 <_free_r>
 8000bde:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000be0:	6063      	str	r3, [r4, #4]
 8000be2:	2000      	movs	r0, #0
 8000be4:	6360      	str	r0, [r4, #52]	@ 0x34
 8000be6:	b113      	cbz	r3, 8000bee <__ssrefill_r+0x24>
 8000be8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000bea:	6023      	str	r3, [r4, #0]
 8000bec:	bd10      	pop	{r4, pc}
 8000bee:	6923      	ldr	r3, [r4, #16]
 8000bf0:	6023      	str	r3, [r4, #0]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	6063      	str	r3, [r4, #4]
 8000bf6:	89a3      	ldrh	r3, [r4, #12]
 8000bf8:	f043 0320 	orr.w	r3, r3, #32
 8000bfc:	81a3      	strh	r3, [r4, #12]
 8000bfe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c02:	e7f3      	b.n	8000bec <__ssrefill_r+0x22>

08000c04 <__ssvfiscanf_r>:
 8000c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c08:	460c      	mov	r4, r1
 8000c0a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8000c0e:	2100      	movs	r1, #0
 8000c10:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8000c14:	49a5      	ldr	r1, [pc, #660]	@ (8000eac <__ssvfiscanf_r+0x2a8>)
 8000c16:	91a0      	str	r1, [sp, #640]	@ 0x280
 8000c18:	f10d 0804 	add.w	r8, sp, #4
 8000c1c:	49a4      	ldr	r1, [pc, #656]	@ (8000eb0 <__ssvfiscanf_r+0x2ac>)
 8000c1e:	4fa5      	ldr	r7, [pc, #660]	@ (8000eb4 <__ssvfiscanf_r+0x2b0>)
 8000c20:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8000c24:	4606      	mov	r6, r0
 8000c26:	91a1      	str	r1, [sp, #644]	@ 0x284
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	7813      	ldrb	r3, [r2, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	f000 8158 	beq.w	8000ee2 <__ssvfiscanf_r+0x2de>
 8000c32:	5cf9      	ldrb	r1, [r7, r3]
 8000c34:	f011 0108 	ands.w	r1, r1, #8
 8000c38:	f102 0501 	add.w	r5, r2, #1
 8000c3c:	d019      	beq.n	8000c72 <__ssvfiscanf_r+0x6e>
 8000c3e:	6863      	ldr	r3, [r4, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	dd0f      	ble.n	8000c64 <__ssvfiscanf_r+0x60>
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	5cba      	ldrb	r2, [r7, r2]
 8000c4a:	0712      	lsls	r2, r2, #28
 8000c4c:	d401      	bmi.n	8000c52 <__ssvfiscanf_r+0x4e>
 8000c4e:	462a      	mov	r2, r5
 8000c50:	e7eb      	b.n	8000c2a <__ssvfiscanf_r+0x26>
 8000c52:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000c54:	3201      	adds	r2, #1
 8000c56:	9245      	str	r2, [sp, #276]	@ 0x114
 8000c58:	6862      	ldr	r2, [r4, #4]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	6062      	str	r2, [r4, #4]
 8000c60:	6023      	str	r3, [r4, #0]
 8000c62:	e7ec      	b.n	8000c3e <__ssvfiscanf_r+0x3a>
 8000c64:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000c66:	4621      	mov	r1, r4
 8000c68:	4630      	mov	r0, r6
 8000c6a:	4798      	blx	r3
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	d0e9      	beq.n	8000c44 <__ssvfiscanf_r+0x40>
 8000c70:	e7ed      	b.n	8000c4e <__ssvfiscanf_r+0x4a>
 8000c72:	2b25      	cmp	r3, #37	@ 0x25
 8000c74:	d012      	beq.n	8000c9c <__ssvfiscanf_r+0x98>
 8000c76:	4699      	mov	r9, r3
 8000c78:	6863      	ldr	r3, [r4, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	f340 8093 	ble.w	8000da6 <__ssvfiscanf_r+0x1a2>
 8000c80:	6822      	ldr	r2, [r4, #0]
 8000c82:	7813      	ldrb	r3, [r2, #0]
 8000c84:	454b      	cmp	r3, r9
 8000c86:	f040 812c 	bne.w	8000ee2 <__ssvfiscanf_r+0x2de>
 8000c8a:	6863      	ldr	r3, [r4, #4]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	6063      	str	r3, [r4, #4]
 8000c90:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000c92:	3201      	adds	r2, #1
 8000c94:	3301      	adds	r3, #1
 8000c96:	6022      	str	r2, [r4, #0]
 8000c98:	9345      	str	r3, [sp, #276]	@ 0x114
 8000c9a:	e7d8      	b.n	8000c4e <__ssvfiscanf_r+0x4a>
 8000c9c:	9141      	str	r1, [sp, #260]	@ 0x104
 8000c9e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000ca0:	7853      	ldrb	r3, [r2, #1]
 8000ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ca4:	bf02      	ittt	eq
 8000ca6:	2310      	moveq	r3, #16
 8000ca8:	1c95      	addeq	r5, r2, #2
 8000caa:	9341      	streq	r3, [sp, #260]	@ 0x104
 8000cac:	220a      	movs	r2, #10
 8000cae:	46a9      	mov	r9, r5
 8000cb0:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000cb4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8000cb8:	2b09      	cmp	r3, #9
 8000cba:	d91e      	bls.n	8000cfa <__ssvfiscanf_r+0xf6>
 8000cbc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8000eb8 <__ssvfiscanf_r+0x2b4>
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	4650      	mov	r0, sl
 8000cc4:	f7ff fa8c 	bl	80001e0 <memchr>
 8000cc8:	b138      	cbz	r0, 8000cda <__ssvfiscanf_r+0xd6>
 8000cca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000ccc:	eba0 000a 	sub.w	r0, r0, sl
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	4083      	lsls	r3, r0
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	9341      	str	r3, [sp, #260]	@ 0x104
 8000cd8:	464d      	mov	r5, r9
 8000cda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000cde:	2b78      	cmp	r3, #120	@ 0x78
 8000ce0:	d806      	bhi.n	8000cf0 <__ssvfiscanf_r+0xec>
 8000ce2:	2b57      	cmp	r3, #87	@ 0x57
 8000ce4:	d810      	bhi.n	8000d08 <__ssvfiscanf_r+0x104>
 8000ce6:	2b25      	cmp	r3, #37	@ 0x25
 8000ce8:	d0c5      	beq.n	8000c76 <__ssvfiscanf_r+0x72>
 8000cea:	d857      	bhi.n	8000d9c <__ssvfiscanf_r+0x198>
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d065      	beq.n	8000dbc <__ssvfiscanf_r+0x1b8>
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	9342      	str	r3, [sp, #264]	@ 0x108
 8000cf8:	e078      	b.n	8000dec <__ssvfiscanf_r+0x1e8>
 8000cfa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000cfc:	fb02 1103 	mla	r1, r2, r3, r1
 8000d00:	3930      	subs	r1, #48	@ 0x30
 8000d02:	9143      	str	r1, [sp, #268]	@ 0x10c
 8000d04:	464d      	mov	r5, r9
 8000d06:	e7d2      	b.n	8000cae <__ssvfiscanf_r+0xaa>
 8000d08:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8000d0c:	2a20      	cmp	r2, #32
 8000d0e:	d8ef      	bhi.n	8000cf0 <__ssvfiscanf_r+0xec>
 8000d10:	a101      	add	r1, pc, #4	@ (adr r1, 8000d18 <__ssvfiscanf_r+0x114>)
 8000d12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000d16:	bf00      	nop
 8000d18:	08000dcb 	.word	0x08000dcb
 8000d1c:	08000cf1 	.word	0x08000cf1
 8000d20:	08000cf1 	.word	0x08000cf1
 8000d24:	08000e25 	.word	0x08000e25
 8000d28:	08000cf1 	.word	0x08000cf1
 8000d2c:	08000cf1 	.word	0x08000cf1
 8000d30:	08000cf1 	.word	0x08000cf1
 8000d34:	08000cf1 	.word	0x08000cf1
 8000d38:	08000cf1 	.word	0x08000cf1
 8000d3c:	08000cf1 	.word	0x08000cf1
 8000d40:	08000cf1 	.word	0x08000cf1
 8000d44:	08000e3b 	.word	0x08000e3b
 8000d48:	08000e21 	.word	0x08000e21
 8000d4c:	08000da3 	.word	0x08000da3
 8000d50:	08000da3 	.word	0x08000da3
 8000d54:	08000da3 	.word	0x08000da3
 8000d58:	08000cf1 	.word	0x08000cf1
 8000d5c:	08000ddd 	.word	0x08000ddd
 8000d60:	08000cf1 	.word	0x08000cf1
 8000d64:	08000cf1 	.word	0x08000cf1
 8000d68:	08000cf1 	.word	0x08000cf1
 8000d6c:	08000cf1 	.word	0x08000cf1
 8000d70:	08000e4b 	.word	0x08000e4b
 8000d74:	08000de5 	.word	0x08000de5
 8000d78:	08000dc3 	.word	0x08000dc3
 8000d7c:	08000cf1 	.word	0x08000cf1
 8000d80:	08000cf1 	.word	0x08000cf1
 8000d84:	08000e47 	.word	0x08000e47
 8000d88:	08000cf1 	.word	0x08000cf1
 8000d8c:	08000e21 	.word	0x08000e21
 8000d90:	08000cf1 	.word	0x08000cf1
 8000d94:	08000cf1 	.word	0x08000cf1
 8000d98:	08000dcb 	.word	0x08000dcb
 8000d9c:	3b45      	subs	r3, #69	@ 0x45
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d8a6      	bhi.n	8000cf0 <__ssvfiscanf_r+0xec>
 8000da2:	2305      	movs	r3, #5
 8000da4:	e021      	b.n	8000dea <__ssvfiscanf_r+0x1e6>
 8000da6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000da8:	4621      	mov	r1, r4
 8000daa:	4630      	mov	r0, r6
 8000dac:	4798      	blx	r3
 8000dae:	2800      	cmp	r0, #0
 8000db0:	f43f af66 	beq.w	8000c80 <__ssvfiscanf_r+0x7c>
 8000db4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000db6:	2800      	cmp	r0, #0
 8000db8:	f040 808b 	bne.w	8000ed2 <__ssvfiscanf_r+0x2ce>
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dc0:	e08b      	b.n	8000eda <__ssvfiscanf_r+0x2d6>
 8000dc2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000dc4:	f042 0220 	orr.w	r2, r2, #32
 8000dc8:	9241      	str	r2, [sp, #260]	@ 0x104
 8000dca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8000dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000dd0:	9241      	str	r2, [sp, #260]	@ 0x104
 8000dd2:	2210      	movs	r2, #16
 8000dd4:	2b6e      	cmp	r3, #110	@ 0x6e
 8000dd6:	9242      	str	r2, [sp, #264]	@ 0x108
 8000dd8:	d902      	bls.n	8000de0 <__ssvfiscanf_r+0x1dc>
 8000dda:	e005      	b.n	8000de8 <__ssvfiscanf_r+0x1e4>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9342      	str	r3, [sp, #264]	@ 0x108
 8000de0:	2303      	movs	r3, #3
 8000de2:	e002      	b.n	8000dea <__ssvfiscanf_r+0x1e6>
 8000de4:	2308      	movs	r3, #8
 8000de6:	9342      	str	r3, [sp, #264]	@ 0x108
 8000de8:	2304      	movs	r3, #4
 8000dea:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000dec:	6863      	ldr	r3, [r4, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	dd39      	ble.n	8000e66 <__ssvfiscanf_r+0x262>
 8000df2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000df4:	0659      	lsls	r1, r3, #25
 8000df6:	d404      	bmi.n	8000e02 <__ssvfiscanf_r+0x1fe>
 8000df8:	6823      	ldr	r3, [r4, #0]
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	5cba      	ldrb	r2, [r7, r2]
 8000dfe:	0712      	lsls	r2, r2, #28
 8000e00:	d438      	bmi.n	8000e74 <__ssvfiscanf_r+0x270>
 8000e02:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	dc47      	bgt.n	8000e98 <__ssvfiscanf_r+0x294>
 8000e08:	466b      	mov	r3, sp
 8000e0a:	4622      	mov	r2, r4
 8000e0c:	a941      	add	r1, sp, #260	@ 0x104
 8000e0e:	4630      	mov	r0, r6
 8000e10:	f000 f90e 	bl	8001030 <_scanf_chars>
 8000e14:	2801      	cmp	r0, #1
 8000e16:	d064      	beq.n	8000ee2 <__ssvfiscanf_r+0x2de>
 8000e18:	2802      	cmp	r0, #2
 8000e1a:	f47f af18 	bne.w	8000c4e <__ssvfiscanf_r+0x4a>
 8000e1e:	e7c9      	b.n	8000db4 <__ssvfiscanf_r+0x1b0>
 8000e20:	220a      	movs	r2, #10
 8000e22:	e7d7      	b.n	8000dd4 <__ssvfiscanf_r+0x1d0>
 8000e24:	4629      	mov	r1, r5
 8000e26:	4640      	mov	r0, r8
 8000e28:	f000 fa50 	bl	80012cc <__sccl>
 8000e2c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e32:	9341      	str	r3, [sp, #260]	@ 0x104
 8000e34:	4605      	mov	r5, r0
 8000e36:	2301      	movs	r3, #1
 8000e38:	e7d7      	b.n	8000dea <__ssvfiscanf_r+0x1e6>
 8000e3a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8000e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e40:	9341      	str	r3, [sp, #260]	@ 0x104
 8000e42:	2300      	movs	r3, #0
 8000e44:	e7d1      	b.n	8000dea <__ssvfiscanf_r+0x1e6>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e7cf      	b.n	8000dea <__ssvfiscanf_r+0x1e6>
 8000e4a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8000e4c:	06c3      	lsls	r3, r0, #27
 8000e4e:	f53f aefe 	bmi.w	8000c4e <__ssvfiscanf_r+0x4a>
 8000e52:	9b00      	ldr	r3, [sp, #0]
 8000e54:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000e56:	1d19      	adds	r1, r3, #4
 8000e58:	9100      	str	r1, [sp, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	07c0      	lsls	r0, r0, #31
 8000e5e:	bf4c      	ite	mi
 8000e60:	801a      	strhmi	r2, [r3, #0]
 8000e62:	601a      	strpl	r2, [r3, #0]
 8000e64:	e6f3      	b.n	8000c4e <__ssvfiscanf_r+0x4a>
 8000e66:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000e68:	4621      	mov	r1, r4
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4798      	blx	r3
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d0bf      	beq.n	8000df2 <__ssvfiscanf_r+0x1ee>
 8000e72:	e79f      	b.n	8000db4 <__ssvfiscanf_r+0x1b0>
 8000e74:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8000e76:	3201      	adds	r2, #1
 8000e78:	9245      	str	r2, [sp, #276]	@ 0x114
 8000e7a:	6862      	ldr	r2, [r4, #4]
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	6062      	str	r2, [r4, #4]
 8000e82:	dd02      	ble.n	8000e8a <__ssvfiscanf_r+0x286>
 8000e84:	3301      	adds	r3, #1
 8000e86:	6023      	str	r3, [r4, #0]
 8000e88:	e7b6      	b.n	8000df8 <__ssvfiscanf_r+0x1f4>
 8000e8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8000e8c:	4621      	mov	r1, r4
 8000e8e:	4630      	mov	r0, r6
 8000e90:	4798      	blx	r3
 8000e92:	2800      	cmp	r0, #0
 8000e94:	d0b0      	beq.n	8000df8 <__ssvfiscanf_r+0x1f4>
 8000e96:	e78d      	b.n	8000db4 <__ssvfiscanf_r+0x1b0>
 8000e98:	2b04      	cmp	r3, #4
 8000e9a:	dc0f      	bgt.n	8000ebc <__ssvfiscanf_r+0x2b8>
 8000e9c:	466b      	mov	r3, sp
 8000e9e:	4622      	mov	r2, r4
 8000ea0:	a941      	add	r1, sp, #260	@ 0x104
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	f000 f91e 	bl	80010e4 <_scanf_i>
 8000ea8:	e7b4      	b.n	8000e14 <__ssvfiscanf_r+0x210>
 8000eaa:	bf00      	nop
 8000eac:	08000b55 	.word	0x08000b55
 8000eb0:	08000bcb 	.word	0x08000bcb
 8000eb4:	080016cc 	.word	0x080016cc
 8000eb8:	080016ac 	.word	0x080016ac
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <__ssvfiscanf_r+0x2e4>)
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f43f aec5 	beq.w	8000c4e <__ssvfiscanf_r+0x4a>
 8000ec4:	466b      	mov	r3, sp
 8000ec6:	4622      	mov	r2, r4
 8000ec8:	a941      	add	r1, sp, #260	@ 0x104
 8000eca:	4630      	mov	r0, r6
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	e7a0      	b.n	8000e14 <__ssvfiscanf_r+0x210>
 8000ed2:	89a3      	ldrh	r3, [r4, #12]
 8000ed4:	065b      	lsls	r3, r3, #25
 8000ed6:	f53f af71 	bmi.w	8000dbc <__ssvfiscanf_r+0x1b8>
 8000eda:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8000ee4:	e7f9      	b.n	8000eda <__ssvfiscanf_r+0x2d6>
 8000ee6:	bf00      	nop
 8000ee8:	00000000 	.word	0x00000000

08000eec <sbrk_aligned>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	4e0f      	ldr	r6, [pc, #60]	@ (8000f2c <sbrk_aligned+0x40>)
 8000ef0:	460c      	mov	r4, r1
 8000ef2:	6831      	ldr	r1, [r6, #0]
 8000ef4:	4605      	mov	r5, r0
 8000ef6:	b911      	cbnz	r1, 8000efe <sbrk_aligned+0x12>
 8000ef8:	f000 fb82 	bl	8001600 <_sbrk_r>
 8000efc:	6030      	str	r0, [r6, #0]
 8000efe:	4621      	mov	r1, r4
 8000f00:	4628      	mov	r0, r5
 8000f02:	f000 fb7d 	bl	8001600 <_sbrk_r>
 8000f06:	1c43      	adds	r3, r0, #1
 8000f08:	d103      	bne.n	8000f12 <sbrk_aligned+0x26>
 8000f0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000f0e:	4620      	mov	r0, r4
 8000f10:	bd70      	pop	{r4, r5, r6, pc}
 8000f12:	1cc4      	adds	r4, r0, #3
 8000f14:	f024 0403 	bic.w	r4, r4, #3
 8000f18:	42a0      	cmp	r0, r4
 8000f1a:	d0f8      	beq.n	8000f0e <sbrk_aligned+0x22>
 8000f1c:	1a21      	subs	r1, r4, r0
 8000f1e:	4628      	mov	r0, r5
 8000f20:	f000 fb6e 	bl	8001600 <_sbrk_r>
 8000f24:	3001      	adds	r0, #1
 8000f26:	d1f2      	bne.n	8000f0e <sbrk_aligned+0x22>
 8000f28:	e7ef      	b.n	8000f0a <sbrk_aligned+0x1e>
 8000f2a:	bf00      	nop
 8000f2c:	200001b4 	.word	0x200001b4

08000f30 <_malloc_r>:
 8000f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f34:	1ccd      	adds	r5, r1, #3
 8000f36:	f025 0503 	bic.w	r5, r5, #3
 8000f3a:	3508      	adds	r5, #8
 8000f3c:	2d0c      	cmp	r5, #12
 8000f3e:	bf38      	it	cc
 8000f40:	250c      	movcc	r5, #12
 8000f42:	2d00      	cmp	r5, #0
 8000f44:	4606      	mov	r6, r0
 8000f46:	db01      	blt.n	8000f4c <_malloc_r+0x1c>
 8000f48:	42a9      	cmp	r1, r5
 8000f4a:	d904      	bls.n	8000f56 <_malloc_r+0x26>
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	6033      	str	r3, [r6, #0]
 8000f50:	2000      	movs	r0, #0
 8000f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800102c <_malloc_r+0xfc>
 8000f5a:	f000 f9f1 	bl	8001340 <__malloc_lock>
 8000f5e:	f8d8 3000 	ldr.w	r3, [r8]
 8000f62:	461c      	mov	r4, r3
 8000f64:	bb44      	cbnz	r4, 8000fb8 <_malloc_r+0x88>
 8000f66:	4629      	mov	r1, r5
 8000f68:	4630      	mov	r0, r6
 8000f6a:	f7ff ffbf 	bl	8000eec <sbrk_aligned>
 8000f6e:	1c43      	adds	r3, r0, #1
 8000f70:	4604      	mov	r4, r0
 8000f72:	d158      	bne.n	8001026 <_malloc_r+0xf6>
 8000f74:	f8d8 4000 	ldr.w	r4, [r8]
 8000f78:	4627      	mov	r7, r4
 8000f7a:	2f00      	cmp	r7, #0
 8000f7c:	d143      	bne.n	8001006 <_malloc_r+0xd6>
 8000f7e:	2c00      	cmp	r4, #0
 8000f80:	d04b      	beq.n	800101a <_malloc_r+0xea>
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	4639      	mov	r1, r7
 8000f86:	4630      	mov	r0, r6
 8000f88:	eb04 0903 	add.w	r9, r4, r3
 8000f8c:	f000 fb38 	bl	8001600 <_sbrk_r>
 8000f90:	4581      	cmp	r9, r0
 8000f92:	d142      	bne.n	800101a <_malloc_r+0xea>
 8000f94:	6821      	ldr	r1, [r4, #0]
 8000f96:	1a6d      	subs	r5, r5, r1
 8000f98:	4629      	mov	r1, r5
 8000f9a:	4630      	mov	r0, r6
 8000f9c:	f7ff ffa6 	bl	8000eec <sbrk_aligned>
 8000fa0:	3001      	adds	r0, #1
 8000fa2:	d03a      	beq.n	800101a <_malloc_r+0xea>
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	442b      	add	r3, r5
 8000fa8:	6023      	str	r3, [r4, #0]
 8000faa:	f8d8 3000 	ldr.w	r3, [r8]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	bb62      	cbnz	r2, 800100c <_malloc_r+0xdc>
 8000fb2:	f8c8 7000 	str.w	r7, [r8]
 8000fb6:	e00f      	b.n	8000fd8 <_malloc_r+0xa8>
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	1b52      	subs	r2, r2, r5
 8000fbc:	d420      	bmi.n	8001000 <_malloc_r+0xd0>
 8000fbe:	2a0b      	cmp	r2, #11
 8000fc0:	d917      	bls.n	8000ff2 <_malloc_r+0xc2>
 8000fc2:	1961      	adds	r1, r4, r5
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	6025      	str	r5, [r4, #0]
 8000fc8:	bf18      	it	ne
 8000fca:	6059      	strne	r1, [r3, #4]
 8000fcc:	6863      	ldr	r3, [r4, #4]
 8000fce:	bf08      	it	eq
 8000fd0:	f8c8 1000 	streq.w	r1, [r8]
 8000fd4:	5162      	str	r2, [r4, r5]
 8000fd6:	604b      	str	r3, [r1, #4]
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f000 f9b7 	bl	800134c <__malloc_unlock>
 8000fde:	f104 000b 	add.w	r0, r4, #11
 8000fe2:	1d23      	adds	r3, r4, #4
 8000fe4:	f020 0007 	bic.w	r0, r0, #7
 8000fe8:	1ac2      	subs	r2, r0, r3
 8000fea:	bf1c      	itt	ne
 8000fec:	1a1b      	subne	r3, r3, r0
 8000fee:	50a3      	strne	r3, [r4, r2]
 8000ff0:	e7af      	b.n	8000f52 <_malloc_r+0x22>
 8000ff2:	6862      	ldr	r2, [r4, #4]
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	bf0c      	ite	eq
 8000ff8:	f8c8 2000 	streq.w	r2, [r8]
 8000ffc:	605a      	strne	r2, [r3, #4]
 8000ffe:	e7eb      	b.n	8000fd8 <_malloc_r+0xa8>
 8001000:	4623      	mov	r3, r4
 8001002:	6864      	ldr	r4, [r4, #4]
 8001004:	e7ae      	b.n	8000f64 <_malloc_r+0x34>
 8001006:	463c      	mov	r4, r7
 8001008:	687f      	ldr	r7, [r7, #4]
 800100a:	e7b6      	b.n	8000f7a <_malloc_r+0x4a>
 800100c:	461a      	mov	r2, r3
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	42a3      	cmp	r3, r4
 8001012:	d1fb      	bne.n	800100c <_malloc_r+0xdc>
 8001014:	2300      	movs	r3, #0
 8001016:	6053      	str	r3, [r2, #4]
 8001018:	e7de      	b.n	8000fd8 <_malloc_r+0xa8>
 800101a:	230c      	movs	r3, #12
 800101c:	6033      	str	r3, [r6, #0]
 800101e:	4630      	mov	r0, r6
 8001020:	f000 f994 	bl	800134c <__malloc_unlock>
 8001024:	e794      	b.n	8000f50 <_malloc_r+0x20>
 8001026:	6005      	str	r5, [r0, #0]
 8001028:	e7d6      	b.n	8000fd8 <_malloc_r+0xa8>
 800102a:	bf00      	nop
 800102c:	200001b8 	.word	0x200001b8

08001030 <_scanf_chars>:
 8001030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001034:	4615      	mov	r5, r2
 8001036:	688a      	ldr	r2, [r1, #8]
 8001038:	4680      	mov	r8, r0
 800103a:	460c      	mov	r4, r1
 800103c:	b932      	cbnz	r2, 800104c <_scanf_chars+0x1c>
 800103e:	698a      	ldr	r2, [r1, #24]
 8001040:	2a00      	cmp	r2, #0
 8001042:	bf14      	ite	ne
 8001044:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8001048:	2201      	moveq	r2, #1
 800104a:	608a      	str	r2, [r1, #8]
 800104c:	6822      	ldr	r2, [r4, #0]
 800104e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80010e0 <_scanf_chars+0xb0>
 8001052:	06d1      	lsls	r1, r2, #27
 8001054:	bf5f      	itttt	pl
 8001056:	681a      	ldrpl	r2, [r3, #0]
 8001058:	1d11      	addpl	r1, r2, #4
 800105a:	6019      	strpl	r1, [r3, #0]
 800105c:	6816      	ldrpl	r6, [r2, #0]
 800105e:	2700      	movs	r7, #0
 8001060:	69a0      	ldr	r0, [r4, #24]
 8001062:	b188      	cbz	r0, 8001088 <_scanf_chars+0x58>
 8001064:	2801      	cmp	r0, #1
 8001066:	d107      	bne.n	8001078 <_scanf_chars+0x48>
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	781a      	ldrb	r2, [r3, #0]
 800106c:	6963      	ldr	r3, [r4, #20]
 800106e:	5c9b      	ldrb	r3, [r3, r2]
 8001070:	b953      	cbnz	r3, 8001088 <_scanf_chars+0x58>
 8001072:	2f00      	cmp	r7, #0
 8001074:	d031      	beq.n	80010da <_scanf_chars+0xaa>
 8001076:	e022      	b.n	80010be <_scanf_chars+0x8e>
 8001078:	2802      	cmp	r0, #2
 800107a:	d120      	bne.n	80010be <_scanf_chars+0x8e>
 800107c:	682b      	ldr	r3, [r5, #0]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f819 3003 	ldrb.w	r3, [r9, r3]
 8001084:	071b      	lsls	r3, r3, #28
 8001086:	d41a      	bmi.n	80010be <_scanf_chars+0x8e>
 8001088:	6823      	ldr	r3, [r4, #0]
 800108a:	06da      	lsls	r2, r3, #27
 800108c:	bf5e      	ittt	pl
 800108e:	682b      	ldrpl	r3, [r5, #0]
 8001090:	781b      	ldrbpl	r3, [r3, #0]
 8001092:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001096:	682a      	ldr	r2, [r5, #0]
 8001098:	686b      	ldr	r3, [r5, #4]
 800109a:	3201      	adds	r2, #1
 800109c:	602a      	str	r2, [r5, #0]
 800109e:	68a2      	ldr	r2, [r4, #8]
 80010a0:	3b01      	subs	r3, #1
 80010a2:	3a01      	subs	r2, #1
 80010a4:	606b      	str	r3, [r5, #4]
 80010a6:	3701      	adds	r7, #1
 80010a8:	60a2      	str	r2, [r4, #8]
 80010aa:	b142      	cbz	r2, 80010be <_scanf_chars+0x8e>
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	dcd7      	bgt.n	8001060 <_scanf_chars+0x30>
 80010b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80010b4:	4629      	mov	r1, r5
 80010b6:	4640      	mov	r0, r8
 80010b8:	4798      	blx	r3
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d0d0      	beq.n	8001060 <_scanf_chars+0x30>
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	f013 0310 	ands.w	r3, r3, #16
 80010c4:	d105      	bne.n	80010d2 <_scanf_chars+0xa2>
 80010c6:	68e2      	ldr	r2, [r4, #12]
 80010c8:	3201      	adds	r2, #1
 80010ca:	60e2      	str	r2, [r4, #12]
 80010cc:	69a2      	ldr	r2, [r4, #24]
 80010ce:	b102      	cbz	r2, 80010d2 <_scanf_chars+0xa2>
 80010d0:	7033      	strb	r3, [r6, #0]
 80010d2:	6923      	ldr	r3, [r4, #16]
 80010d4:	443b      	add	r3, r7
 80010d6:	6123      	str	r3, [r4, #16]
 80010d8:	2000      	movs	r0, #0
 80010da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010de:	bf00      	nop
 80010e0:	080016cc 	.word	0x080016cc

080010e4 <_scanf_i>:
 80010e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010e8:	4698      	mov	r8, r3
 80010ea:	4b74      	ldr	r3, [pc, #464]	@ (80012bc <_scanf_i+0x1d8>)
 80010ec:	460c      	mov	r4, r1
 80010ee:	4682      	mov	sl, r0
 80010f0:	4616      	mov	r6, r2
 80010f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010f6:	b087      	sub	sp, #28
 80010f8:	ab03      	add	r3, sp, #12
 80010fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010fe:	4b70      	ldr	r3, [pc, #448]	@ (80012c0 <_scanf_i+0x1dc>)
 8001100:	69a1      	ldr	r1, [r4, #24]
 8001102:	4a70      	ldr	r2, [pc, #448]	@ (80012c4 <_scanf_i+0x1e0>)
 8001104:	2903      	cmp	r1, #3
 8001106:	bf08      	it	eq
 8001108:	461a      	moveq	r2, r3
 800110a:	68a3      	ldr	r3, [r4, #8]
 800110c:	9201      	str	r2, [sp, #4]
 800110e:	1e5a      	subs	r2, r3, #1
 8001110:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8001114:	bf88      	it	hi
 8001116:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800111a:	4627      	mov	r7, r4
 800111c:	bf82      	ittt	hi
 800111e:	eb03 0905 	addhi.w	r9, r3, r5
 8001122:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8001126:	60a3      	strhi	r3, [r4, #8]
 8001128:	f857 3b1c 	ldr.w	r3, [r7], #28
 800112c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8001130:	bf98      	it	ls
 8001132:	f04f 0900 	movls.w	r9, #0
 8001136:	6023      	str	r3, [r4, #0]
 8001138:	463d      	mov	r5, r7
 800113a:	f04f 0b00 	mov.w	fp, #0
 800113e:	6831      	ldr	r1, [r6, #0]
 8001140:	ab03      	add	r3, sp, #12
 8001142:	7809      	ldrb	r1, [r1, #0]
 8001144:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001148:	2202      	movs	r2, #2
 800114a:	f7ff f849 	bl	80001e0 <memchr>
 800114e:	b328      	cbz	r0, 800119c <_scanf_i+0xb8>
 8001150:	f1bb 0f01 	cmp.w	fp, #1
 8001154:	d159      	bne.n	800120a <_scanf_i+0x126>
 8001156:	6862      	ldr	r2, [r4, #4]
 8001158:	b92a      	cbnz	r2, 8001166 <_scanf_i+0x82>
 800115a:	6822      	ldr	r2, [r4, #0]
 800115c:	2108      	movs	r1, #8
 800115e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001162:	6061      	str	r1, [r4, #4]
 8001164:	6022      	str	r2, [r4, #0]
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800116c:	6022      	str	r2, [r4, #0]
 800116e:	68a2      	ldr	r2, [r4, #8]
 8001170:	1e51      	subs	r1, r2, #1
 8001172:	60a1      	str	r1, [r4, #8]
 8001174:	b192      	cbz	r2, 800119c <_scanf_i+0xb8>
 8001176:	6832      	ldr	r2, [r6, #0]
 8001178:	1c51      	adds	r1, r2, #1
 800117a:	6031      	str	r1, [r6, #0]
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	f805 2b01 	strb.w	r2, [r5], #1
 8001182:	6872      	ldr	r2, [r6, #4]
 8001184:	3a01      	subs	r2, #1
 8001186:	2a00      	cmp	r2, #0
 8001188:	6072      	str	r2, [r6, #4]
 800118a:	dc07      	bgt.n	800119c <_scanf_i+0xb8>
 800118c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8001190:	4631      	mov	r1, r6
 8001192:	4650      	mov	r0, sl
 8001194:	4790      	blx	r2
 8001196:	2800      	cmp	r0, #0
 8001198:	f040 8085 	bne.w	80012a6 <_scanf_i+0x1c2>
 800119c:	f10b 0b01 	add.w	fp, fp, #1
 80011a0:	f1bb 0f03 	cmp.w	fp, #3
 80011a4:	d1cb      	bne.n	800113e <_scanf_i+0x5a>
 80011a6:	6863      	ldr	r3, [r4, #4]
 80011a8:	b90b      	cbnz	r3, 80011ae <_scanf_i+0xca>
 80011aa:	230a      	movs	r3, #10
 80011ac:	6063      	str	r3, [r4, #4]
 80011ae:	6863      	ldr	r3, [r4, #4]
 80011b0:	4945      	ldr	r1, [pc, #276]	@ (80012c8 <_scanf_i+0x1e4>)
 80011b2:	6960      	ldr	r0, [r4, #20]
 80011b4:	1ac9      	subs	r1, r1, r3
 80011b6:	f000 f889 	bl	80012cc <__sccl>
 80011ba:	f04f 0b00 	mov.w	fp, #0
 80011be:	68a3      	ldr	r3, [r4, #8]
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03d      	beq.n	8001242 <_scanf_i+0x15e>
 80011c6:	6831      	ldr	r1, [r6, #0]
 80011c8:	6960      	ldr	r0, [r4, #20]
 80011ca:	f891 c000 	ldrb.w	ip, [r1]
 80011ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 80011d2:	2800      	cmp	r0, #0
 80011d4:	d035      	beq.n	8001242 <_scanf_i+0x15e>
 80011d6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80011da:	d124      	bne.n	8001226 <_scanf_i+0x142>
 80011dc:	0510      	lsls	r0, r2, #20
 80011de:	d522      	bpl.n	8001226 <_scanf_i+0x142>
 80011e0:	f10b 0b01 	add.w	fp, fp, #1
 80011e4:	f1b9 0f00 	cmp.w	r9, #0
 80011e8:	d003      	beq.n	80011f2 <_scanf_i+0x10e>
 80011ea:	3301      	adds	r3, #1
 80011ec:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80011f0:	60a3      	str	r3, [r4, #8]
 80011f2:	6873      	ldr	r3, [r6, #4]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	6073      	str	r3, [r6, #4]
 80011fa:	dd1b      	ble.n	8001234 <_scanf_i+0x150>
 80011fc:	6833      	ldr	r3, [r6, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	6033      	str	r3, [r6, #0]
 8001202:	68a3      	ldr	r3, [r4, #8]
 8001204:	3b01      	subs	r3, #1
 8001206:	60a3      	str	r3, [r4, #8]
 8001208:	e7d9      	b.n	80011be <_scanf_i+0xda>
 800120a:	f1bb 0f02 	cmp.w	fp, #2
 800120e:	d1ae      	bne.n	800116e <_scanf_i+0x8a>
 8001210:	6822      	ldr	r2, [r4, #0]
 8001212:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8001216:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800121a:	d1bf      	bne.n	800119c <_scanf_i+0xb8>
 800121c:	2110      	movs	r1, #16
 800121e:	6061      	str	r1, [r4, #4]
 8001220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001224:	e7a2      	b.n	800116c <_scanf_i+0x88>
 8001226:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800122a:	6022      	str	r2, [r4, #0]
 800122c:	780b      	ldrb	r3, [r1, #0]
 800122e:	f805 3b01 	strb.w	r3, [r5], #1
 8001232:	e7de      	b.n	80011f2 <_scanf_i+0x10e>
 8001234:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8001238:	4631      	mov	r1, r6
 800123a:	4650      	mov	r0, sl
 800123c:	4798      	blx	r3
 800123e:	2800      	cmp	r0, #0
 8001240:	d0df      	beq.n	8001202 <_scanf_i+0x11e>
 8001242:	6823      	ldr	r3, [r4, #0]
 8001244:	05d9      	lsls	r1, r3, #23
 8001246:	d50d      	bpl.n	8001264 <_scanf_i+0x180>
 8001248:	42bd      	cmp	r5, r7
 800124a:	d909      	bls.n	8001260 <_scanf_i+0x17c>
 800124c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8001250:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8001254:	4632      	mov	r2, r6
 8001256:	4650      	mov	r0, sl
 8001258:	4798      	blx	r3
 800125a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800125e:	464d      	mov	r5, r9
 8001260:	42bd      	cmp	r5, r7
 8001262:	d028      	beq.n	80012b6 <_scanf_i+0x1d2>
 8001264:	6822      	ldr	r2, [r4, #0]
 8001266:	f012 0210 	ands.w	r2, r2, #16
 800126a:	d113      	bne.n	8001294 <_scanf_i+0x1b0>
 800126c:	702a      	strb	r2, [r5, #0]
 800126e:	6863      	ldr	r3, [r4, #4]
 8001270:	9e01      	ldr	r6, [sp, #4]
 8001272:	4639      	mov	r1, r7
 8001274:	4650      	mov	r0, sl
 8001276:	47b0      	blx	r6
 8001278:	f8d8 3000 	ldr.w	r3, [r8]
 800127c:	6821      	ldr	r1, [r4, #0]
 800127e:	1d1a      	adds	r2, r3, #4
 8001280:	f8c8 2000 	str.w	r2, [r8]
 8001284:	f011 0f20 	tst.w	r1, #32
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	d00f      	beq.n	80012ac <_scanf_i+0x1c8>
 800128c:	6018      	str	r0, [r3, #0]
 800128e:	68e3      	ldr	r3, [r4, #12]
 8001290:	3301      	adds	r3, #1
 8001292:	60e3      	str	r3, [r4, #12]
 8001294:	6923      	ldr	r3, [r4, #16]
 8001296:	1bed      	subs	r5, r5, r7
 8001298:	445d      	add	r5, fp
 800129a:	442b      	add	r3, r5
 800129c:	6123      	str	r3, [r4, #16]
 800129e:	2000      	movs	r0, #0
 80012a0:	b007      	add	sp, #28
 80012a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012a6:	f04f 0b00 	mov.w	fp, #0
 80012aa:	e7ca      	b.n	8001242 <_scanf_i+0x15e>
 80012ac:	07ca      	lsls	r2, r1, #31
 80012ae:	bf4c      	ite	mi
 80012b0:	8018      	strhmi	r0, [r3, #0]
 80012b2:	6018      	strpl	r0, [r3, #0]
 80012b4:	e7eb      	b.n	800128e <_scanf_i+0x1aa>
 80012b6:	2001      	movs	r0, #1
 80012b8:	e7f2      	b.n	80012a0 <_scanf_i+0x1bc>
 80012ba:	bf00      	nop
 80012bc:	080016a0 	.word	0x080016a0
 80012c0:	0800151d 	.word	0x0800151d
 80012c4:	080015fd 	.word	0x080015fd
 80012c8:	080016c0 	.word	0x080016c0

080012cc <__sccl>:
 80012cc:	b570      	push	{r4, r5, r6, lr}
 80012ce:	780b      	ldrb	r3, [r1, #0]
 80012d0:	4604      	mov	r4, r0
 80012d2:	2b5e      	cmp	r3, #94	@ 0x5e
 80012d4:	bf0b      	itete	eq
 80012d6:	784b      	ldrbeq	r3, [r1, #1]
 80012d8:	1c4a      	addne	r2, r1, #1
 80012da:	1c8a      	addeq	r2, r1, #2
 80012dc:	2100      	movne	r1, #0
 80012de:	bf08      	it	eq
 80012e0:	2101      	moveq	r1, #1
 80012e2:	3801      	subs	r0, #1
 80012e4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80012e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80012ec:	42a8      	cmp	r0, r5
 80012ee:	d1fb      	bne.n	80012e8 <__sccl+0x1c>
 80012f0:	b90b      	cbnz	r3, 80012f6 <__sccl+0x2a>
 80012f2:	1e50      	subs	r0, r2, #1
 80012f4:	bd70      	pop	{r4, r5, r6, pc}
 80012f6:	f081 0101 	eor.w	r1, r1, #1
 80012fa:	54e1      	strb	r1, [r4, r3]
 80012fc:	4610      	mov	r0, r2
 80012fe:	4602      	mov	r2, r0
 8001300:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001304:	2d2d      	cmp	r5, #45	@ 0x2d
 8001306:	d005      	beq.n	8001314 <__sccl+0x48>
 8001308:	2d5d      	cmp	r5, #93	@ 0x5d
 800130a:	d016      	beq.n	800133a <__sccl+0x6e>
 800130c:	2d00      	cmp	r5, #0
 800130e:	d0f1      	beq.n	80012f4 <__sccl+0x28>
 8001310:	462b      	mov	r3, r5
 8001312:	e7f2      	b.n	80012fa <__sccl+0x2e>
 8001314:	7846      	ldrb	r6, [r0, #1]
 8001316:	2e5d      	cmp	r6, #93	@ 0x5d
 8001318:	d0fa      	beq.n	8001310 <__sccl+0x44>
 800131a:	42b3      	cmp	r3, r6
 800131c:	dcf8      	bgt.n	8001310 <__sccl+0x44>
 800131e:	3002      	adds	r0, #2
 8001320:	461a      	mov	r2, r3
 8001322:	3201      	adds	r2, #1
 8001324:	4296      	cmp	r6, r2
 8001326:	54a1      	strb	r1, [r4, r2]
 8001328:	dcfb      	bgt.n	8001322 <__sccl+0x56>
 800132a:	1af2      	subs	r2, r6, r3
 800132c:	3a01      	subs	r2, #1
 800132e:	1c5d      	adds	r5, r3, #1
 8001330:	42b3      	cmp	r3, r6
 8001332:	bfa8      	it	ge
 8001334:	2200      	movge	r2, #0
 8001336:	18ab      	adds	r3, r5, r2
 8001338:	e7e1      	b.n	80012fe <__sccl+0x32>
 800133a:	4610      	mov	r0, r2
 800133c:	e7da      	b.n	80012f4 <__sccl+0x28>
	...

08001340 <__malloc_lock>:
 8001340:	4801      	ldr	r0, [pc, #4]	@ (8001348 <__malloc_lock+0x8>)
 8001342:	f7ff bbbb 	b.w	8000abc <__retarget_lock_acquire_recursive>
 8001346:	bf00      	nop
 8001348:	200001b0 	.word	0x200001b0

0800134c <__malloc_unlock>:
 800134c:	4801      	ldr	r0, [pc, #4]	@ (8001354 <__malloc_unlock+0x8>)
 800134e:	f7ff bbb6 	b.w	8000abe <__retarget_lock_release_recursive>
 8001352:	bf00      	nop
 8001354:	200001b0 	.word	0x200001b0

08001358 <__submore>:
 8001358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800135c:	460c      	mov	r4, r1
 800135e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8001360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001364:	4299      	cmp	r1, r3
 8001366:	d11d      	bne.n	80013a4 <__submore+0x4c>
 8001368:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800136c:	f7ff fde0 	bl	8000f30 <_malloc_r>
 8001370:	b918      	cbnz	r0, 800137a <__submore+0x22>
 8001372:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800137a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800137e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001380:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8001384:	6360      	str	r0, [r4, #52]	@ 0x34
 8001386:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800138a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800138e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8001392:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8001396:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800139a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800139e:	6020      	str	r0, [r4, #0]
 80013a0:	2000      	movs	r0, #0
 80013a2:	e7e8      	b.n	8001376 <__submore+0x1e>
 80013a4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80013a6:	0077      	lsls	r7, r6, #1
 80013a8:	463a      	mov	r2, r7
 80013aa:	f000 f80f 	bl	80013cc <_realloc_r>
 80013ae:	4605      	mov	r5, r0
 80013b0:	2800      	cmp	r0, #0
 80013b2:	d0de      	beq.n	8001372 <__submore+0x1a>
 80013b4:	eb00 0806 	add.w	r8, r0, r6
 80013b8:	4601      	mov	r1, r0
 80013ba:	4632      	mov	r2, r6
 80013bc:	4640      	mov	r0, r8
 80013be:	f000 f92f 	bl	8001620 <memcpy>
 80013c2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80013c6:	f8c4 8000 	str.w	r8, [r4]
 80013ca:	e7e9      	b.n	80013a0 <__submore+0x48>

080013cc <_realloc_r>:
 80013cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d0:	4680      	mov	r8, r0
 80013d2:	4615      	mov	r5, r2
 80013d4:	460c      	mov	r4, r1
 80013d6:	b921      	cbnz	r1, 80013e2 <_realloc_r+0x16>
 80013d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013dc:	4611      	mov	r1, r2
 80013de:	f7ff bda7 	b.w	8000f30 <_malloc_r>
 80013e2:	b92a      	cbnz	r2, 80013f0 <_realloc_r+0x24>
 80013e4:	f7ff fb6c 	bl	8000ac0 <_free_r>
 80013e8:	2400      	movs	r4, #0
 80013ea:	4620      	mov	r0, r4
 80013ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013f0:	f000 f924 	bl	800163c <_malloc_usable_size_r>
 80013f4:	4285      	cmp	r5, r0
 80013f6:	4606      	mov	r6, r0
 80013f8:	d802      	bhi.n	8001400 <_realloc_r+0x34>
 80013fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80013fe:	d8f4      	bhi.n	80013ea <_realloc_r+0x1e>
 8001400:	4629      	mov	r1, r5
 8001402:	4640      	mov	r0, r8
 8001404:	f7ff fd94 	bl	8000f30 <_malloc_r>
 8001408:	4607      	mov	r7, r0
 800140a:	2800      	cmp	r0, #0
 800140c:	d0ec      	beq.n	80013e8 <_realloc_r+0x1c>
 800140e:	42b5      	cmp	r5, r6
 8001410:	462a      	mov	r2, r5
 8001412:	4621      	mov	r1, r4
 8001414:	bf28      	it	cs
 8001416:	4632      	movcs	r2, r6
 8001418:	f000 f902 	bl	8001620 <memcpy>
 800141c:	4621      	mov	r1, r4
 800141e:	4640      	mov	r0, r8
 8001420:	f7ff fb4e 	bl	8000ac0 <_free_r>
 8001424:	463c      	mov	r4, r7
 8001426:	e7e0      	b.n	80013ea <_realloc_r+0x1e>

08001428 <_strtol_l.constprop.0>:
 8001428:	2b24      	cmp	r3, #36	@ 0x24
 800142a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800142e:	4686      	mov	lr, r0
 8001430:	4690      	mov	r8, r2
 8001432:	d801      	bhi.n	8001438 <_strtol_l.constprop.0+0x10>
 8001434:	2b01      	cmp	r3, #1
 8001436:	d106      	bne.n	8001446 <_strtol_l.constprop.0+0x1e>
 8001438:	f7ff fb16 	bl	8000a68 <__errno>
 800143c:	2316      	movs	r3, #22
 800143e:	6003      	str	r3, [r0, #0]
 8001440:	2000      	movs	r0, #0
 8001442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001446:	4834      	ldr	r0, [pc, #208]	@ (8001518 <_strtol_l.constprop.0+0xf0>)
 8001448:	460d      	mov	r5, r1
 800144a:	462a      	mov	r2, r5
 800144c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001450:	5d06      	ldrb	r6, [r0, r4]
 8001452:	f016 0608 	ands.w	r6, r6, #8
 8001456:	d1f8      	bne.n	800144a <_strtol_l.constprop.0+0x22>
 8001458:	2c2d      	cmp	r4, #45	@ 0x2d
 800145a:	d12d      	bne.n	80014b8 <_strtol_l.constprop.0+0x90>
 800145c:	782c      	ldrb	r4, [r5, #0]
 800145e:	2601      	movs	r6, #1
 8001460:	1c95      	adds	r5, r2, #2
 8001462:	f033 0210 	bics.w	r2, r3, #16
 8001466:	d109      	bne.n	800147c <_strtol_l.constprop.0+0x54>
 8001468:	2c30      	cmp	r4, #48	@ 0x30
 800146a:	d12a      	bne.n	80014c2 <_strtol_l.constprop.0+0x9a>
 800146c:	782a      	ldrb	r2, [r5, #0]
 800146e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8001472:	2a58      	cmp	r2, #88	@ 0x58
 8001474:	d125      	bne.n	80014c2 <_strtol_l.constprop.0+0x9a>
 8001476:	786c      	ldrb	r4, [r5, #1]
 8001478:	2310      	movs	r3, #16
 800147a:	3502      	adds	r5, #2
 800147c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8001480:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8001484:	2200      	movs	r2, #0
 8001486:	fbbc f9f3 	udiv	r9, ip, r3
 800148a:	4610      	mov	r0, r2
 800148c:	fb03 ca19 	mls	sl, r3, r9, ip
 8001490:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8001494:	2f09      	cmp	r7, #9
 8001496:	d81b      	bhi.n	80014d0 <_strtol_l.constprop.0+0xa8>
 8001498:	463c      	mov	r4, r7
 800149a:	42a3      	cmp	r3, r4
 800149c:	dd27      	ble.n	80014ee <_strtol_l.constprop.0+0xc6>
 800149e:	1c57      	adds	r7, r2, #1
 80014a0:	d007      	beq.n	80014b2 <_strtol_l.constprop.0+0x8a>
 80014a2:	4581      	cmp	r9, r0
 80014a4:	d320      	bcc.n	80014e8 <_strtol_l.constprop.0+0xc0>
 80014a6:	d101      	bne.n	80014ac <_strtol_l.constprop.0+0x84>
 80014a8:	45a2      	cmp	sl, r4
 80014aa:	db1d      	blt.n	80014e8 <_strtol_l.constprop.0+0xc0>
 80014ac:	fb00 4003 	mla	r0, r0, r3, r4
 80014b0:	2201      	movs	r2, #1
 80014b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80014b6:	e7eb      	b.n	8001490 <_strtol_l.constprop.0+0x68>
 80014b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80014ba:	bf04      	itt	eq
 80014bc:	782c      	ldrbeq	r4, [r5, #0]
 80014be:	1c95      	addeq	r5, r2, #2
 80014c0:	e7cf      	b.n	8001462 <_strtol_l.constprop.0+0x3a>
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1da      	bne.n	800147c <_strtol_l.constprop.0+0x54>
 80014c6:	2c30      	cmp	r4, #48	@ 0x30
 80014c8:	bf0c      	ite	eq
 80014ca:	2308      	moveq	r3, #8
 80014cc:	230a      	movne	r3, #10
 80014ce:	e7d5      	b.n	800147c <_strtol_l.constprop.0+0x54>
 80014d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80014d4:	2f19      	cmp	r7, #25
 80014d6:	d801      	bhi.n	80014dc <_strtol_l.constprop.0+0xb4>
 80014d8:	3c37      	subs	r4, #55	@ 0x37
 80014da:	e7de      	b.n	800149a <_strtol_l.constprop.0+0x72>
 80014dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80014e0:	2f19      	cmp	r7, #25
 80014e2:	d804      	bhi.n	80014ee <_strtol_l.constprop.0+0xc6>
 80014e4:	3c57      	subs	r4, #87	@ 0x57
 80014e6:	e7d8      	b.n	800149a <_strtol_l.constprop.0+0x72>
 80014e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014ec:	e7e1      	b.n	80014b2 <_strtol_l.constprop.0+0x8a>
 80014ee:	1c53      	adds	r3, r2, #1
 80014f0:	d108      	bne.n	8001504 <_strtol_l.constprop.0+0xdc>
 80014f2:	2322      	movs	r3, #34	@ 0x22
 80014f4:	f8ce 3000 	str.w	r3, [lr]
 80014f8:	4660      	mov	r0, ip
 80014fa:	f1b8 0f00 	cmp.w	r8, #0
 80014fe:	d0a0      	beq.n	8001442 <_strtol_l.constprop.0+0x1a>
 8001500:	1e69      	subs	r1, r5, #1
 8001502:	e006      	b.n	8001512 <_strtol_l.constprop.0+0xea>
 8001504:	b106      	cbz	r6, 8001508 <_strtol_l.constprop.0+0xe0>
 8001506:	4240      	negs	r0, r0
 8001508:	f1b8 0f00 	cmp.w	r8, #0
 800150c:	d099      	beq.n	8001442 <_strtol_l.constprop.0+0x1a>
 800150e:	2a00      	cmp	r2, #0
 8001510:	d1f6      	bne.n	8001500 <_strtol_l.constprop.0+0xd8>
 8001512:	f8c8 1000 	str.w	r1, [r8]
 8001516:	e794      	b.n	8001442 <_strtol_l.constprop.0+0x1a>
 8001518:	080016cc 	.word	0x080016cc

0800151c <_strtol_r>:
 800151c:	f7ff bf84 	b.w	8001428 <_strtol_l.constprop.0>

08001520 <_strtoul_l.constprop.0>:
 8001520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001524:	4e34      	ldr	r6, [pc, #208]	@ (80015f8 <_strtoul_l.constprop.0+0xd8>)
 8001526:	4686      	mov	lr, r0
 8001528:	460d      	mov	r5, r1
 800152a:	4628      	mov	r0, r5
 800152c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001530:	5d37      	ldrb	r7, [r6, r4]
 8001532:	f017 0708 	ands.w	r7, r7, #8
 8001536:	d1f8      	bne.n	800152a <_strtoul_l.constprop.0+0xa>
 8001538:	2c2d      	cmp	r4, #45	@ 0x2d
 800153a:	d12f      	bne.n	800159c <_strtoul_l.constprop.0+0x7c>
 800153c:	782c      	ldrb	r4, [r5, #0]
 800153e:	2701      	movs	r7, #1
 8001540:	1c85      	adds	r5, r0, #2
 8001542:	f033 0010 	bics.w	r0, r3, #16
 8001546:	d109      	bne.n	800155c <_strtoul_l.constprop.0+0x3c>
 8001548:	2c30      	cmp	r4, #48	@ 0x30
 800154a:	d12c      	bne.n	80015a6 <_strtoul_l.constprop.0+0x86>
 800154c:	7828      	ldrb	r0, [r5, #0]
 800154e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8001552:	2858      	cmp	r0, #88	@ 0x58
 8001554:	d127      	bne.n	80015a6 <_strtoul_l.constprop.0+0x86>
 8001556:	786c      	ldrb	r4, [r5, #1]
 8001558:	2310      	movs	r3, #16
 800155a:	3502      	adds	r5, #2
 800155c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8001560:	2600      	movs	r6, #0
 8001562:	fbb8 f8f3 	udiv	r8, r8, r3
 8001566:	fb03 f908 	mul.w	r9, r3, r8
 800156a:	ea6f 0909 	mvn.w	r9, r9
 800156e:	4630      	mov	r0, r6
 8001570:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8001574:	f1bc 0f09 	cmp.w	ip, #9
 8001578:	d81c      	bhi.n	80015b4 <_strtoul_l.constprop.0+0x94>
 800157a:	4664      	mov	r4, ip
 800157c:	42a3      	cmp	r3, r4
 800157e:	dd2a      	ble.n	80015d6 <_strtoul_l.constprop.0+0xb6>
 8001580:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8001584:	d007      	beq.n	8001596 <_strtoul_l.constprop.0+0x76>
 8001586:	4580      	cmp	r8, r0
 8001588:	d322      	bcc.n	80015d0 <_strtoul_l.constprop.0+0xb0>
 800158a:	d101      	bne.n	8001590 <_strtoul_l.constprop.0+0x70>
 800158c:	45a1      	cmp	r9, r4
 800158e:	db1f      	blt.n	80015d0 <_strtoul_l.constprop.0+0xb0>
 8001590:	fb00 4003 	mla	r0, r0, r3, r4
 8001594:	2601      	movs	r6, #1
 8001596:	f815 4b01 	ldrb.w	r4, [r5], #1
 800159a:	e7e9      	b.n	8001570 <_strtoul_l.constprop.0+0x50>
 800159c:	2c2b      	cmp	r4, #43	@ 0x2b
 800159e:	bf04      	itt	eq
 80015a0:	782c      	ldrbeq	r4, [r5, #0]
 80015a2:	1c85      	addeq	r5, r0, #2
 80015a4:	e7cd      	b.n	8001542 <_strtoul_l.constprop.0+0x22>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1d8      	bne.n	800155c <_strtoul_l.constprop.0+0x3c>
 80015aa:	2c30      	cmp	r4, #48	@ 0x30
 80015ac:	bf0c      	ite	eq
 80015ae:	2308      	moveq	r3, #8
 80015b0:	230a      	movne	r3, #10
 80015b2:	e7d3      	b.n	800155c <_strtoul_l.constprop.0+0x3c>
 80015b4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80015b8:	f1bc 0f19 	cmp.w	ip, #25
 80015bc:	d801      	bhi.n	80015c2 <_strtoul_l.constprop.0+0xa2>
 80015be:	3c37      	subs	r4, #55	@ 0x37
 80015c0:	e7dc      	b.n	800157c <_strtoul_l.constprop.0+0x5c>
 80015c2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80015c6:	f1bc 0f19 	cmp.w	ip, #25
 80015ca:	d804      	bhi.n	80015d6 <_strtoul_l.constprop.0+0xb6>
 80015cc:	3c57      	subs	r4, #87	@ 0x57
 80015ce:	e7d5      	b.n	800157c <_strtoul_l.constprop.0+0x5c>
 80015d0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80015d4:	e7df      	b.n	8001596 <_strtoul_l.constprop.0+0x76>
 80015d6:	1c73      	adds	r3, r6, #1
 80015d8:	d106      	bne.n	80015e8 <_strtoul_l.constprop.0+0xc8>
 80015da:	2322      	movs	r3, #34	@ 0x22
 80015dc:	f8ce 3000 	str.w	r3, [lr]
 80015e0:	4630      	mov	r0, r6
 80015e2:	b932      	cbnz	r2, 80015f2 <_strtoul_l.constprop.0+0xd2>
 80015e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015e8:	b107      	cbz	r7, 80015ec <_strtoul_l.constprop.0+0xcc>
 80015ea:	4240      	negs	r0, r0
 80015ec:	2a00      	cmp	r2, #0
 80015ee:	d0f9      	beq.n	80015e4 <_strtoul_l.constprop.0+0xc4>
 80015f0:	b106      	cbz	r6, 80015f4 <_strtoul_l.constprop.0+0xd4>
 80015f2:	1e69      	subs	r1, r5, #1
 80015f4:	6011      	str	r1, [r2, #0]
 80015f6:	e7f5      	b.n	80015e4 <_strtoul_l.constprop.0+0xc4>
 80015f8:	080016cc 	.word	0x080016cc

080015fc <_strtoul_r>:
 80015fc:	f7ff bf90 	b.w	8001520 <_strtoul_l.constprop.0>

08001600 <_sbrk_r>:
 8001600:	b538      	push	{r3, r4, r5, lr}
 8001602:	4d06      	ldr	r5, [pc, #24]	@ (800161c <_sbrk_r+0x1c>)
 8001604:	2300      	movs	r3, #0
 8001606:	4604      	mov	r4, r0
 8001608:	4608      	mov	r0, r1
 800160a:	602b      	str	r3, [r5, #0]
 800160c:	f7ff f88e 	bl	800072c <_sbrk>
 8001610:	1c43      	adds	r3, r0, #1
 8001612:	d102      	bne.n	800161a <_sbrk_r+0x1a>
 8001614:	682b      	ldr	r3, [r5, #0]
 8001616:	b103      	cbz	r3, 800161a <_sbrk_r+0x1a>
 8001618:	6023      	str	r3, [r4, #0]
 800161a:	bd38      	pop	{r3, r4, r5, pc}
 800161c:	200001ac 	.word	0x200001ac

08001620 <memcpy>:
 8001620:	440a      	add	r2, r1
 8001622:	4291      	cmp	r1, r2
 8001624:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001628:	d100      	bne.n	800162c <memcpy+0xc>
 800162a:	4770      	bx	lr
 800162c:	b510      	push	{r4, lr}
 800162e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001636:	4291      	cmp	r1, r2
 8001638:	d1f9      	bne.n	800162e <memcpy+0xe>
 800163a:	bd10      	pop	{r4, pc}

0800163c <_malloc_usable_size_r>:
 800163c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001640:	1f18      	subs	r0, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	bfbc      	itt	lt
 8001646:	580b      	ldrlt	r3, [r1, r0]
 8001648:	18c0      	addlt	r0, r0, r3
 800164a:	4770      	bx	lr

0800164c <_init>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	bf00      	nop
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr

08001658 <_fini>:
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	bf00      	nop
 800165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165e:	bc08      	pop	{r3}
 8001660:	469e      	mov	lr, r3
 8001662:	4770      	bx	lr
